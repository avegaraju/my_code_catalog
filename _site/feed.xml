<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-03-01T22:31:05+01:00</updated><id>/feed.xml</id><title type="html">My code catalog</title><subtitle>test.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2021/02/25/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-02-25T22:48:02+01:00</published><updated>2021-02-25T22:48:02+01:00</updated><id>/jekyll/update/2021/02/25/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2021/02/25/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2020/09/21/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-09-21T01:43:10+02:00</published><updated>2020-09-21T01:43:10+02:00</updated><id>/jekyll/update/2020/09/21/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2020/09/21/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Function Purity in F#</title><link href="/2018/12/24/function-purity-in-f.html" rel="alternate" type="text/html" title="Function Purity in F#" /><published>2018-12-24T23:44:00+01:00</published><updated>2018-12-24T23:44:00+01:00</updated><id>/2018/12/24/function-purity-in-f</id><content type="html" xml:base="/2018/12/24/function-purity-in-f.html">&lt;!-- wp:paragraph --&gt;
&lt;p&gt;In my last article about &lt;a href=&quot;https://ashishvegaraju.com/2018/09/24/functional-domain-modeling/&quot;&gt;Functional domain modeling&lt;/a&gt;, I explored the expressiveness of F# in modeling a domain. I fell in love with the simplicity and expressiveness of the language. In this article I will attempt to explore function purity in F#. In F#, functions are first class citizens because it allows to pass function as an argument to other function, return a function or assign function to a variable. Initially I found it a bit hard to wrap my head around the concept of treating functions as first class citizens. In fact one of the biggest challenge for me was surprisingly not the weird syntax of F#, but to think in terms of functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Coming from an OO background and not very comfortable with F#, below was my first attempt to write a use case. I basically tried to mimic a use case in a typical ports and adapters project from one of the C# projects. This use case serves a basic purpose which is to update the dimensions of a product, if it exists, of course.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;[gist https://gist.github.com/avegaraju/18a503c2351100ee5c3568efc8426f49/]&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Pretty straight forward. The use case accepts a &lt;code&gt;DataStore&lt;/code&gt; dependency using which the &lt;code&gt;update&lt;/code&gt; method can query the &lt;code&gt;Products&lt;/code&gt; table for existence of a product. If the product is found then the product is fetched from the data store and dimensions are updated. Finally, the product with updated dimensions is persisted in the database using the data store.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Though this use case works, there are several problems with this way of writing code. Lets take a look at the problems:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;&lt;strong&gt;Testability&lt;/strong&gt;&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The code above is not easily testable. Why you ask? Lets look at how many ways things can go wrong with this code.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;
&lt;ol&gt;&lt;li&gt;What if the constructor arguments are null?&lt;/li&gt;&lt;li&gt;What if the &lt;code&gt;productExists&lt;/code&gt; data store method returns an exception.&lt;/li&gt;&lt;li&gt;What if &lt;code&gt;updateDimensions&lt;/code&gt;, which in turn calls &lt;code&gt;getProduct&lt;/code&gt; and &lt;code&gt;updateProduct&lt;/code&gt; methods on the data store returns exception?&lt;/li&gt;&lt;li&gt;What if the product does not exist?&lt;/li&gt;&lt;li&gt;What if product dimensions does not exist?&lt;/li&gt;&lt;li&gt;what if ....&lt;/li&gt;&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;and the list will go on ..&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;So many scenarios to test with just one dependency. What if I add &lt;code&gt;ExternalService&lt;/code&gt; as another dependency to this use case? Imagine the number of ways this third party service call can go wrong. The point is that whenever we deal with external systems, be it database or an external service, we are entering a world of uncertainty and we do not have much control over the behavior of those external systems. It would be nice if the use case and the domain model could completely avoid any type of IO operations or side affects. Sounds like a nice idea, but a use case which does not perform IO is next to useless. Stay with me and we will explore a way to minimize or avoid IO and side affects in the use case and domain model by the end of this article.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Hidden dependencies&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;One of the beautiful things about F# is its expressiveness. The &lt;code&gt;update&lt;/code&gt; method in our example is all but expressive about its intent. It has a dependency on &lt;code&gt;DataStore&lt;/code&gt; which is not evident when we look at the method signature. This is what I call as a hidden dependency. What if in future someone modifies the &lt;code&gt;update&lt;/code&gt; method and calls a completely different method on the datastore? Since the &lt;code&gt;update&lt;/code&gt; method is not expressive enough, developers can assume a lot of things. Is there a way to avoid these hidden dependencies? Can we make the update method a little more expressive to avoid mistakes by future developers? Again, by the end of this article, we will try to re-write the &lt;code&gt;update&lt;/code&gt; method to make it a little bit more expressive.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Referential Transparency&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Methods in our use case are not referentially transparent. Especially the &lt;code&gt;update&lt;/code&gt; method is not by any means. What is referential transparency? A function is referentially transparent if the function can be replaced with its corresponding value without affecting the behavior of the system. For example,&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:preformatted --&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;if, x + y = 10&lt;br /&gt;&lt;br /&gt;then, the expression x + y + z = 20 can be written as 10 + z = 20&lt;/pre&gt;
&lt;!-- /wp:preformatted --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;In our use case the method &lt;code&gt;update&lt;/code&gt;, depending on whether one of the data store methods return an exception, may or may not update the product dimensions. We can never assume that a call to &lt;code&gt;update&lt;/code&gt; method always updates product dimensions. Due to this uncertainty, I will not be able to include &lt;code&gt;update&lt;/code&gt; method in a method chain like this and assume that warehouse system will be always notified after the product dimensions update.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;[gist https://gist.github.com/avegaraju/53dd6dc264b22ae4664983445e567312/]&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;There are other smaller problems with this code. But for now, lets focus on fixing the problems that we identified above and making this use case a little bit better.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Here is an attempt to fix some of the problems we discussed above.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;[gist https://gist.github.com/avegaraju/1e90438e3ae2c7aa8905977a751d74aa/]&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;First thing worth noticing is that these functions are not inside a &lt;code&gt;type&lt;/code&gt; because there is no common dependency between these two functions. These functions exists on its own (under a module) and only accepts parameters that they can work with. The function name and signature are self documenting and they clearly communicate the intent. There is no scope of nasty exceptions bubbling up because of an unstable dependency. &lt;strong&gt;&lt;i&gt;These are pure functions&lt;/i&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Lets see how easy it is to test these functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;[gist https://gist.github.com/avegaraju/d8c27b1a3b8ef64cb5549e89115e5fca/]&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Simple and straightforward. There is no need to setup mocks for different scenarios here. You can create test data to your hearts content and test this function out. I have used &lt;a href=&quot;https://github.com/AutoFixture/AutoFixture&quot;&gt;Autofixture&lt;/a&gt;, but &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/property-based-testing/&quot;&gt;Property based tests&lt;/a&gt; are better suited for testing these functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Coming back to the referential transparency. The &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; functions are referentially transparent. For instance, if the &lt;code&gt;Product&lt;/code&gt; exists in the list of products then &lt;code&gt;find&lt;/code&gt; will always return the Product. Otherwise, it always returns &lt;code&gt;None&lt;/code&gt;, consistently.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;So, we have seen how getting rid of impure operations tremendously simplifies the program. But wait, this new shiny pure functional program does nothing useful. The end goal of this program is to update dimensions in the &lt;i&gt;database.&lt;/i&gt; How do we make sure that we stick to function purity but also be able to perform impure operations like persisting data in a database or calling a third party service etc? You need to do the following:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;
&lt;ol&gt;&lt;li&gt;Push IO (impure) functions at the boundary of your domain.&lt;/li&gt;&lt;li&gt;Call pure functions from the impure functions and not the other way round.&lt;/li&gt;&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:quote --&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;As long as an impure function calls a Pure function you are good. When a pure function calls an impure function then the whole method chain becomes impure.&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- /wp:quote --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;You would have guessed where we are going with this kind of separation between pure and impure functions. OK, no points for guessing, moving impure functions at the boundary and calling pure functions from there naturally leads you to &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;clean architecture&lt;/a&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Let's see how does the call to pure functions from an impure function looks like.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;[gist https://gist.github.com/avegaraju/e27a7abe2645023078015666fdf07b49 /]&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;br /&gt;&lt;code&gt;tryUpdateProductDimensions&lt;/code&gt;is an impure function because it calls &lt;code&gt;getAllProducts&lt;/code&gt; which in turn calls &lt;code&gt;allProducts&lt;/code&gt; from the &lt;code&gt;DB&lt;/code&gt; module. &lt;code&gt;DB&lt;/code&gt; module performs a bunch of impure operations. We can call it as the core of impurity (pun intended). For the sake of completeness, here is how I have implemented the DB module.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;[gist https://gist.github.com/avegaraju/03d60370b3d794575affc1e505975c0c /]&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;For a developer who is not fully familiar with F# or the functional programming paradigm may quite easily fall into the pit of writing OO style code with F# just like me in the beginning of this article. In F#, separating impure functions from pure functions requires discipline. As I understand, F# has no in-built magic to prevent you from mixing pure and impure functions. Haskell in that respect is pretty strict because it forces you to wrap impure functions using an &lt;a href=&quot;https://wiki.haskell.org/Introduction_to_IO&quot;&gt;IO monadic system&lt;/a&gt;. In simple terms an IO monad is an abstract data structure which elevates a value. Once the value is elevated you can no longer access the original value. To access the original value, you must use one of the mapping functions of the monad. I can write a similar IO monad in F#, but is it really worth the effort? The F# compiler would not honor such an IO monad. Though I think that it may be a good idea to enforce it as a coding convention for your projects.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Let me know in the comments section below what you think about the IO system in Haskell. Should F# support something similar? If yes, why and if no why not?&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><author><name>avegaraju</name></author><summary type="html">In my last article about Functional domain modeling, I explored the expressiveness of F# in modeling a domain. I fell in love with the simplicity and expressiveness of the language. In this article I will attempt to explore function purity in F#. In F#, functions are first class citizens because it allows to pass function as an argument to other function, return a function or assign function to a variable. Initially I found it a bit hard to wrap my head around the concept of treating functions as first class citizens. In fact one of the biggest challenge for me was surprisingly not the weird syntax of F#, but to think in terms of functions.</summary></entry><entry><title type="html">Functional Domain Modeling</title><link href="/2018/09/24/functional-domain-modeling.html" rel="alternate" type="text/html" title="Functional Domain Modeling" /><published>2018-09-24T23:02:00+02:00</published><updated>2018-09-24T23:02:00+02:00</updated><id>/2018/09/24/functional-domain-modeling</id><content type="html" xml:base="/2018/09/24/functional-domain-modeling.html">&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Lately, I've been reading about functional paradigm and related programming languages. More I read about it, more I feel that modeling domains in pure C# (or Java for that matter) is &lt;em&gt;unnatural&lt;/em&gt; and does not communicate the intent of the domain clearly.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;After so many years of writing C# code, that's quite a statement to make. But, I am serious. Lets model a simple subdomain &lt;strong&gt;Order&lt;/strong&gt; for a hypothetical e-commerce company using F# then later using C# and see which of the models looks more expressive.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Lets start with C# first. Below is a typical &lt;code&gt;Order&lt;/code&gt; entity with some typical properties.&lt;/p&gt;
&lt;p&gt;https://gist.github.com/avegaraju/a0738e33f449f4fda4c11328293b5c95&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;&lt;em&gt;(For brevity, I have removed other properties &amp;amp; methods which add behavior to this model.)&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;At first glance, this model looks decent. &lt;em&gt;Technically,&lt;/em&gt; it has all the properties required to represent an&amp;nbsp;&lt;code&gt;​​Order&lt;/code&gt;. It uses &lt;a href=&quot;https://martinfowler.com/bliki/UbiquitousLanguage.html&quot; data-mce-href=&quot;https://martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;ubiquitous language&lt;/a&gt; for modeling the domain, it uses strong types to represent attributes of an order (so, the smell of &lt;a href=&quot;http://wiki.c2.com/?PrimitiveObsession&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;http://wiki.c2.com/?PrimitiveObsession&quot;&gt;primitive obsession&lt;/a&gt; is also taken care of). The properties expose only public getters, so state change (if we choose to do so) is only possible via public methods. But, does this model document the design of Order subdomain? Can a developer look at this model and understand what are the business constraints in this sub-domain? The answer is No. Let's examine this model closely to see why.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Lack of &lt;em&gt;Choice&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;The &lt;code&gt;PaymentMethod&lt;/code&gt; property is of type &lt;code&gt;IPaymentMethod&lt;/code&gt;. Typically, this interface would be implemented by concrete payment method classes like &lt;code&gt;​CashOnDelivery&lt;/code&gt;, &lt;code&gt;CreditCard&lt;/code&gt; &lt;code&gt;Paypal&lt;/code&gt; etc. But, this property does not &lt;em&gt;scream&lt;/em&gt; about all the supported payment methods of the order sub-domain.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Of course, I can always see what are the types implementing &lt;code&gt;IPaymentMethod&lt;/code&gt; interface, but, its well.. ehm... &lt;em&gt;unnatural&lt;/em&gt; ...(you will see why when we examine the F# model). In short, the payments methods are not explicitly documented &lt;em&gt;in the&lt;/em&gt; &lt;em&gt;model&lt;/em&gt;. Another problem with having an interface is that it does not allow the domain modeler to make the property hold different &lt;em&gt;types (or combination of types)&lt;/em&gt; of values depending on a particular payment method. For instance, in case of CreditCard, I would like the property to hold Card number &lt;em&gt;and&lt;/em&gt; CardType information, if the payment method is PayPal then the property should hold the paypal Id etc.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Another problem, though minor, is that we do not know if we are dealing with a closed set of payment methods. What if an innocent developer makes an &lt;em&gt;innocent&lt;/em&gt; mistake and adds &lt;code&gt;MyAwesomePaymentMethod&lt;/code&gt; as another implementation of &lt;code&gt;IPaymentMethod&lt;/code&gt;. So, now &lt;code&gt;Order&lt;/code&gt; is secretly supporting a new payment method and no one (include the innocent developer) has a clue about it.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Here comes F# for the rescue. F# has discriminated unions. In other words a &lt;em&gt;&lt;strong&gt;choice type,&lt;/strong&gt;&lt;/em&gt; which, if used, unambiguously documents about the only three supported payment methods available. In other words, its a &lt;em&gt;closed set&lt;/em&gt; of payment methods. Below is how the &lt;code&gt;PaymentMethod&lt;/code&gt; type would be modeled in F#. Looking at this file, one can see the complete spec of &lt;code&gt;PaymentMethod&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;https://gist.github.com/avegaraju/bfae189f33aad1cd24498df4230eb521&lt;/p&gt;

&lt;p&gt;If I want to print a payment method (Of course, I wouldn’t from a domain model, perhaps I would execute a function for each &lt;em&gt;matched&lt;/em&gt; payment method), I can &lt;em&gt;pattern match&lt;/em&gt; and print (or do something more useful) in here.&lt;/p&gt;

&lt;p&gt;https://gist.github.com/avegaraju/f5c6040682597f7535eba60962a62ea8&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Notice how pattern matching allows us to return different information depending on&amp;nbsp; the &lt;em&gt;choice&lt;/em&gt; of payment method. In case of Paypal, I can use the PaypalId. Similarly, in case of &lt;code&gt;Card&lt;/code&gt; payment, I can use the card number and card type.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Coming back to C#, I can use pattern matching and try to mimic the F# &lt;em&gt;choice type&lt;/em&gt; behavior. But its ugly and convoluted (IDK why I am even mentioning it here :D ).&lt;/p&gt;
&lt;p&gt;https://gist.github.com/avegaraju/d53bccf85e229197c021c854b9b52437&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stuck without &lt;em&gt;Option&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Let's take a good look at the C# domain model once again. Can you infer which properties are required and which are optional? Typically, an order may or may not have a discount code which makes the property &lt;code&gt;DiscountCode&lt;/code&gt; optional. But, the C# model fails to document that constraint. You may argue that &lt;code&gt;DiscountCode&lt;/code&gt; could be made &lt;code&gt;nullable&lt;/code&gt; and then all is good. But, is &lt;code&gt;null&lt;/code&gt; equivalent to &lt;em&gt;not having&lt;/em&gt; a discount code?&lt;/p&gt;
&lt;p&gt;In F#, we can use &lt;code&gt;​Option&amp;lt;'a&amp;gt;&lt;/code&gt; to denote an optional field as shown here:&lt;/p&gt;

&lt;p&gt;https://gist.github.com/avegaraju/b296ebfa02ef75274e9409eeca9c4a3a&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;This is a self documenting domain model. By looking at it I know that an order may or may not have &lt;code&gt;DiscountCode&lt;/code&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Luckily, &lt;a href=&quot;https://github.com/louthy/language-ext&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;https://github.com/louthy/language-ext&quot;&gt;Language Ext&lt;/a&gt; package allows us to do this in C#. The &lt;code&gt;Order&lt;/code&gt; model in C# (using Language Ext) now looks like this:&lt;/p&gt;
&lt;p&gt;https://gist.github.com/avegaraju/252c9d48dbb459594054edc01420786b&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Much better!&lt;/p&gt;
&lt;p&gt;As mentioned, an &lt;code&gt;​Option&lt;/code&gt; may or may not have a value. This is denoted with &lt;code&gt;​Some&lt;/code&gt; or​ &lt;code&gt;None&lt;/code&gt; respectively. Below is how one can inspect / match an &lt;code&gt;Option&lt;/code&gt; to see if it contains a &lt;code&gt;Some&lt;/code&gt; or a &lt;code&gt;None&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;https://gist.github.com/avegaraju/eef9b73057ef1a9cdfc9708dfbf9ae5f&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;That's a short one on why I feel that functional languages are naturally good for modeling domains as they make domain models expressive and self documenting. I am still experimenting with a couple of functional languages and so far I can see clear benefits of functional languages over imperative languages when it comes to developing a project with domain driven design.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;I am not sure how easy or painful it is to access database or perform I/O with a functional language. I would probably run into it at some point. Do share your experiences (good and /or painful) with functional languages under comments and Thanks for reading!&lt;/p&gt;</content><author><name>avegaraju</name></author><summary type="html">Lately, I've been reading about functional paradigm and related programming languages. More I read about it, more I feel that modeling domains in pure C# (or Java for that matter) is unnatural and does not communicate the intent of the domain clearly. After so many years of writing C# code, that's quite a statement to make. But, I am serious. Lets model a simple subdomain Order for a hypothetical e-commerce company using F# then later using C# and see which of the models looks more expressive. Lets start with C# first. Below is a typical Order entity with some typical properties. https://gist.github.com/avegaraju/a0738e33f449f4fda4c11328293b5c95 (For brevity, I have removed other properties &amp;amp; methods which add behavior to this model.) At first glance, this model looks decent. Technically, it has all the properties required to represent an&amp;nbsp;​​Order. It uses ubiquitous language for modeling the domain, it uses strong types to represent attributes of an order (so, the smell of primitive obsession is also taken care of). The properties expose only public getters, so state change (if we choose to do so) is only possible via public methods. But, does this model document the design of Order subdomain? Can a developer look at this model and understand what are the business constraints in this sub-domain? The answer is No. Let's examine this model closely to see why. Lack of Choice The PaymentMethod property is of type IPaymentMethod. Typically, this interface would be implemented by concrete payment method classes like ​CashOnDelivery, CreditCard Paypal etc. But, this property does not scream about all the supported payment methods of the order sub-domain. Of course, I can always see what are the types implementing IPaymentMethod interface, but, its well.. ehm... unnatural ...(you will see why when we examine the F# model). In short, the payments methods are not explicitly documented in the model. Another problem with having an interface is that it does not allow the domain modeler to make the property hold different types (or combination of types) of values depending on a particular payment method. For instance, in case of CreditCard, I would like the property to hold Card number and CardType information, if the payment method is PayPal then the property should hold the paypal Id etc. Another problem, though minor, is that we do not know if we are dealing with a closed set of payment methods. What if an innocent developer makes an innocent mistake and adds MyAwesomePaymentMethod as another implementation of IPaymentMethod. So, now Order is secretly supporting a new payment method and no one (include the innocent developer) has a clue about it. Here comes F# for the rescue. F# has discriminated unions. In other words a choice type, which, if used, unambiguously documents about the only three supported payment methods available. In other words, its a closed set of payment methods. Below is how the PaymentMethod type would be modeled in F#. Looking at this file, one can see the complete spec of PaymentMethod type.</summary></entry></feed>