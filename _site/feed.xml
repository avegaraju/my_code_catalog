<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-31T22:45:40+01:00</updated><id>/feed.xml</id><title type="html">My code catalog</title><subtitle></subtitle><entry><title type="html">AWS Appsync adventure</title><link href="/2023/01/31/AWS-appsync-adventure/" rel="alternate" type="text/html" title="AWS Appsync adventure" /><published>2023-01-31T00:09:00+01:00</published><updated>2023-01-31T00:09:00+01:00</updated><id>/2023/01/31/AWS-appsync-adventure</id><content type="html" xml:base="/2023/01/31/AWS-appsync-adventure/">&lt;h1 id=&quot;aws-appsync-adventure&quot;&gt;AWS Appsync adventure&lt;/h1&gt;

&lt;p&gt;AWS Appsync is a GraphQL offerring of AWS. It allows to create a unified API that acts as a gateway to connect to a variety of datasources ranging from DynamoDB, RDS, Lambdas, API Gateway etc. I was using AWS appsync for slightly over a year for one of my personal projects and I have come to appreciate the overall versatility and robustness of this service. In this article I aim to share my learnings, insights and some pain points in the hope that my readers can make an informed decision whether this offerring is a good fit for their project or not.&lt;/p&gt;

&lt;p&gt;I was using AWS appsync for one of my personal projects&lt;br /&gt;
Hi! I’m your first Markdown file in &lt;strong&gt;StackEdit&lt;/strong&gt;. If you want to learn about StackEdit, you can read me. If you want to play with Markdown, you can edit me. Once you have finished with me, you can create new files by opening the &lt;strong&gt;file explorer&lt;/strong&gt; on the left corner of the navigation bar.&lt;/p&gt;

&lt;h1 id=&quot;files&quot;&gt;Files&lt;/h1&gt;

&lt;p&gt;StackEdit stores your files in your browser, which means all your files are automatically saved locally and are accessible &lt;strong&gt;offline!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-files-and-folders&quot;&gt;Create files and folders&lt;/h2&gt;

&lt;p&gt;The file explorer is accessible using the button in left corner of the navigation bar. You can create a new file by clicking the &lt;strong&gt;New file&lt;/strong&gt; button in the file explorer. You can also create folders by clicking the &lt;strong&gt;New folder&lt;/strong&gt; button.&lt;/p&gt;

&lt;h2 id=&quot;switch-to-another-file&quot;&gt;Switch to another file&lt;/h2&gt;

&lt;p&gt;All your files and folders are presented as a tree in the file explorer. You can switch from one to another by clicking a file in the tree.&lt;/p&gt;

&lt;h2 id=&quot;rename-a-file&quot;&gt;Rename a file&lt;/h2&gt;

&lt;p&gt;You can rename the current file by clicking the file name in the navigation bar or by clicking the &lt;strong&gt;Rename&lt;/strong&gt; button in the file explorer.&lt;/p&gt;

&lt;h2 id=&quot;delete-a-file&quot;&gt;Delete a file&lt;/h2&gt;

&lt;p&gt;You can delete the current file by clicking the &lt;strong&gt;Remove&lt;/strong&gt; button in the file explorer. The file will be moved into the &lt;strong&gt;Trash&lt;/strong&gt; folder and automatically deleted after 7 days of inactivity.&lt;/p&gt;

&lt;h2 id=&quot;export-a-file&quot;&gt;Export a file&lt;/h2&gt;

&lt;p&gt;You can export the current file by clicking &lt;strong&gt;Export to disk&lt;/strong&gt; in the menu. You can choose to export the file as plain Markdown, as HTML using a Handlebars template or as a PDF.&lt;/p&gt;

&lt;h1 id=&quot;synchronization&quot;&gt;Synchronization&lt;/h1&gt;

&lt;p&gt;Synchronization is one of the biggest features of StackEdit. It enables you to synchronize any file in your workspace with other files stored in your &lt;strong&gt;Google Drive&lt;/strong&gt;, your &lt;strong&gt;Dropbox&lt;/strong&gt; and your &lt;strong&gt;GitHub&lt;/strong&gt; accounts. This allows you to keep writing on other devices, collaborate with people you share the file with, integrate easily into your workflow… The synchronization mechanism takes place every minute in the background, downloading, merging, and uploading file modifications.&lt;/p&gt;

&lt;p&gt;There are two types of synchronization and they can complement each other:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The workspace synchronization will sync all your files, folders and settings automatically. This will allow you to fetch your workspace on any other device.
    &lt;blockquote&gt;
      &lt;p&gt;To start syncing your workspace, just sign in with Google in the menu.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;The file synchronization will keep one file of the workspace synced with one or multiple files in &lt;strong&gt;Google Drive&lt;/strong&gt;, &lt;strong&gt;Dropbox&lt;/strong&gt; or &lt;strong&gt;GitHub&lt;/strong&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Before starting to sync files, you must link an account in the &lt;strong&gt;Synchronize&lt;/strong&gt; sub-menu.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-a-file&quot;&gt;Open a file&lt;/h2&gt;

&lt;p&gt;You can open a file from &lt;strong&gt;Google Drive&lt;/strong&gt;, &lt;strong&gt;Dropbox&lt;/strong&gt; or &lt;strong&gt;GitHub&lt;/strong&gt; by opening the &lt;strong&gt;Synchronize&lt;/strong&gt; sub-menu and clicking &lt;strong&gt;Open from&lt;/strong&gt;. Once opened in the workspace, any modification in the file will be automatically synced.&lt;/p&gt;

&lt;h2 id=&quot;save-a-file&quot;&gt;Save a file&lt;/h2&gt;

&lt;p&gt;You can save any file of the workspace to &lt;strong&gt;Google Drive&lt;/strong&gt;, &lt;strong&gt;Dropbox&lt;/strong&gt; or &lt;strong&gt;GitHub&lt;/strong&gt; by opening the &lt;strong&gt;Synchronize&lt;/strong&gt; sub-menu and clicking &lt;strong&gt;Save on&lt;/strong&gt;. Even if a file in the workspace is already synced, you can save it to another location. StackEdit can sync one file with multiple locations and accounts.&lt;/p&gt;

&lt;h2 id=&quot;synchronize-a-file&quot;&gt;Synchronize a file&lt;/h2&gt;

&lt;p&gt;Once your file is linked to a synchronized location, StackEdit will periodically synchronize it by downloading/uploading any modification. A merge will be performed if necessary and conflicts will be resolved.&lt;/p&gt;

&lt;p&gt;If you just have modified your file and you want to force syncing, click the &lt;strong&gt;Synchronize now&lt;/strong&gt; button in the navigation bar.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;Synchronize now&lt;/strong&gt; button is disabled if you have no file to synchronize.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;manage-file-synchronization&quot;&gt;Manage file synchronization&lt;/h2&gt;

&lt;p&gt;Since one file can be synced with multiple locations, you can list and manage synchronized locations by clicking &lt;strong&gt;File synchronization&lt;/strong&gt; in the &lt;strong&gt;Synchronize&lt;/strong&gt; sub-menu. This allows you to list and remove synchronized locations that are linked to your file.&lt;/p&gt;

&lt;h1 id=&quot;publication&quot;&gt;Publication&lt;/h1&gt;

&lt;p&gt;Publishing in StackEdit makes it simple for you to publish online your files. Once you’re happy with a file, you can publish it to different hosting platforms like &lt;strong&gt;Blogger&lt;/strong&gt;, &lt;strong&gt;Dropbox&lt;/strong&gt;, &lt;strong&gt;Gist&lt;/strong&gt;, &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;Google Drive&lt;/strong&gt;, &lt;strong&gt;WordPress&lt;/strong&gt; and &lt;strong&gt;Zendesk&lt;/strong&gt;. With &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars templates&lt;/a&gt;, you have full control over what you export.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before starting to publish, you must link an account in the &lt;strong&gt;Publish&lt;/strong&gt; sub-menu.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;publish-a-file&quot;&gt;Publish a File&lt;/h2&gt;

&lt;p&gt;You can publish your file by opening the &lt;strong&gt;Publish&lt;/strong&gt; sub-menu and by clicking &lt;strong&gt;Publish to&lt;/strong&gt;. For some locations, you can choose between the following formats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Markdown: publish the Markdown text on a website that can interpret it (&lt;strong&gt;GitHub&lt;/strong&gt; for instance),&lt;/li&gt;
  &lt;li&gt;HTML: publish the file converted to HTML via a Handlebars template (on a blog for example).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;update-a-publication&quot;&gt;Update a publication&lt;/h2&gt;

&lt;p&gt;After publishing, StackEdit keeps your file linked to that publication which makes it easy for you to re-publish it. Once you have modified your file and you want to update your publication, click on the &lt;strong&gt;Publish now&lt;/strong&gt; button in the navigation bar.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;Publish now&lt;/strong&gt; button is disabled if your file has not been published yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;manage-file-publication&quot;&gt;Manage file publication&lt;/h2&gt;

&lt;p&gt;Since one file can be published to multiple locations, you can list and manage publish locations by clicking &lt;strong&gt;File publication&lt;/strong&gt; in the &lt;strong&gt;Publish&lt;/strong&gt; sub-menu. This allows you to list and remove publication locations that are linked to your file.&lt;/p&gt;

&lt;h1 id=&quot;markdown-extensions&quot;&gt;Markdown extensions&lt;/h1&gt;

&lt;p&gt;StackEdit extends the standard Markdown syntax by adding extra &lt;strong&gt;Markdown extensions&lt;/strong&gt;, providing you with some nice features.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;ProTip:&lt;/strong&gt; You can disable any &lt;strong&gt;Markdown extension&lt;/strong&gt; in the &lt;strong&gt;File properties&lt;/strong&gt; dialog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;smartypants&quot;&gt;SmartyPants&lt;/h2&gt;

&lt;p&gt;SmartyPants converts ASCII punctuation characters into “smart” typographic punctuation HTML entities. For example:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;ASCII&lt;/th&gt;
      &lt;th&gt;HTML&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Single backticks&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Isn't this fun?'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;‘Isn’t this fun?’&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Quotes&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Isn't this fun?&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;“Isn’t this fun?”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dashes&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-- is en-dash, --- is em-dash&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;– is en-dash, — is em-dash&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;katex&quot;&gt;KaTeX&lt;/h2&gt;

&lt;p&gt;You can render LaTeX mathematical expressions using &lt;a href=&quot;https://khan.github.io/KaTeX/&quot;&gt;KaTeX&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Gamma function&lt;/em&gt; satisfying $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ is via the Euler integral&lt;/p&gt;

\[\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.\]

&lt;blockquote&gt;
  &lt;p&gt;You can find more information about &lt;strong&gt;LaTeX&lt;/strong&gt; mathematical expressions &lt;a href=&quot;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;uml-diagrams&quot;&gt;UML diagrams&lt;/h2&gt;

&lt;p&gt;You can render UML diagrams using &lt;a href=&quot;https://mermaidjs.github.io/&quot;&gt;Mermaid&lt;/a&gt;. For example, this will produce a sequence diagram:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
Alice -&amp;gt;&amp;gt; Bob: Hello Bob, how are you?
Bob--&amp;gt;&amp;gt;John: How about you John?
Bob--x Alice: I am good thanks!
Bob-x John: I am good thanks!
Note right of John: Bob thinks a long&amp;lt;br/&amp;gt;long time, so long&amp;lt;br/&amp;gt;that the text does&amp;lt;br/&amp;gt;not fit on a row.

Bob--&amp;gt;Alice: Checking with John...
Alice-&amp;gt;John: Yes... John, how are you?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will produce a flow chart:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
A[Square Rect] -- Link text --&amp;gt; B((Circle))
A --&amp;gt; C(Round Rect)
B --&amp;gt; D{Rhombus}
C --&amp;gt; D
&lt;/code&gt;&lt;/pre&gt;</content><author><name>avegaraju</name></author><category term="AWS" /><category term="appsync" /><category term="graphql" /><summary type="html">AWS Appsync adventure</summary></entry><entry><title type="html">AWS DynamoDB - My notes on single table design</title><link href="/2023/01/13/AWS-DynamoDB-Single-table-design/" rel="alternate" type="text/html" title="AWS DynamoDB - My notes on single table design" /><published>2023-01-13T00:09:00+01:00</published><updated>2023-01-13T00:09:00+01:00</updated><id>/2023/01/13/AWS-DynamoDB-Single-table-design</id><content type="html" xml:base="/2023/01/13/AWS-DynamoDB-Single-table-design/">&lt;p&gt;&lt;img src=&quot;../../../../images/blog/banner.jpg&quot; width=&quot;100%&quot; height=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;span style=&quot;font-size:xx-large&quot;&gt;W&lt;/span&gt;hen it comes to designing a data store for your application, there are many options to choose from, each with its own set of advantages and disadvantages. One option that is gaining popularity among developers is using a single table of Amazon DynamoDB. Also, Amazon strongly recommends designing single table for most of the applications. We recently experimented with using a single table for one of our applications at work and through this article, I will be sharing my experience. I will be discussing the advantages and limitations of using a single table design, as well as the best practices that I researched and learned along the way. We ended up using basic modeling techniques at work, however this article is intended to also share the research I did about some advanced single table design techniques and possible pitfalls. This article might provide some insights into how to effectively use or design a single table. 
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Its always best to come to a common understanding of what is meant by single table design. So Let’s start from basics:&lt;/p&gt;

&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:2} --&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;In DynamoDB, single-table design is a method of storing all data in a single table, rather than using multiple tables for different data types or use cases. This approach is achieved by using a composite primary key, which consists of both a partition key and a sort key.
A composite primary key allows you to store multiple data types or entities in a single table, while still being able to retrieve and query data efficiently. 
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;For example, imagine you have an e-commerce application and you want to store data about customers, orders, and products. With single-table design, you could store all of this data in a single DynamoDB table, using the partition key to distinguish between different types of data, and the sort key to sort data within each partition.
Here’s an example of how you might set up a table:
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| partition key  | sort key     | other attributes|
---------------------------------------------------
| &quot;customer&quot;     | &quot;customer_id&quot;| name, address, etc|
---------------------------------------------------
| &quot;order&quot;        | &quot;order_id&quot;   | customer_id, total, etc |
---------------------------------------------------
| &quot;product&quot;      | &quot;product_id&quot; | name, price, etc       |

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!-- wp:paragraph --&gt;
&lt;p&gt;In this example, the partition key is “entity” and the sort key is “entity_id” . This table can have many other attributes like name, address, price etc. Using this structure, you can retrieve all orders  by using the “order” partition key and order_id as the sort key. Or you can retrieve all product details for a specific product by using “product” as the partition key and the product_id as the sort key.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;With basic definition out of our way, lets dive into the bend of mind that is required to design such a table. Before starting to design a table you have to come up with ways in which you’d like to access data from this table. This is commonly known as “Access Pattern”. In fact, in the previous paragraph what you read about retrieving data with the help of partition and sort keys are indeed access patterns. Coming up with access patterns at the beginning helps to model the table better.
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:2} --&gt;
&lt;h2 id=&quot;access-patterns-explained&quot;&gt;Access Patterns explained&lt;/h2&gt;
&lt;!-- /wp:heading --&gt;
&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Needless to say, just having a partition and sort key on a table cannot support all the possible access patterns. For instance, what if I want to retrieve all orders for a given customer? As you can see in the above table, there is no way you can query that information. This is where GSIs, abbreviation for Global Secondary Index comes to rescue. 
&lt;!-- /wp:paragraph --&gt;
&lt;!-- wp:paragraph --&gt;
Let’s take a look at GSIs and try to understand that with help of an example.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:2} --&gt;
&lt;h3 id=&quot;global-secondary-indexes&quot;&gt;Global Secondary Indexes&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;
&lt;!-- wp:paragraph --&gt;
&lt;p&gt;A global secondary index (GSI) in Amazon DynamoDB is a secondary index that has a different partition key than the primary key of the table. This allows you to create and maintain one or more secondary indexes on your DynamoDB table in addition to the primary index.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Using the same example mentioned before, let’s say you want to query all orders for a give customer_id then you might want to create a GSI on the table to support this access pattern. This GSI would have customer_id as the primary key. 
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
I am using &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/workbench.settingup.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/workbench.settingup.html&quot;&gt;[No Sql Workbench]&lt;/a&gt; to model the database table below. I highly recommend to use this tool for modeling, as it makes it easy to quickly visualize the changes made on the model.&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Pictures are worth 1000 words, so here is a screenshot of how the table is designed with primary and sort key with different attributes. 
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/blog/table-with-attributes.jpg&quot; /&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Here is the screenshot of GSI to support the access pattern of accessing orders based on a customer_id
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/blog/gsi-orders-by-customer.jpg&quot; /&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;I added some dummy data to show how the GSI was able to support our access pattern.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/blog/aggregate-view.jpg&quot; /&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;As you can see, the GSI made customer id as the primary key and projected all other attributes related to order in this view.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Similarly its is easy to create GSIs to support additional patterns in future.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;GSI is not the only way to support additional access patterns, there are three more ways to support additional access patterns:
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Local Secondary Index (LSI): Similar to GSI but only allows to use the same partition key but different sort key. It can be useful if you only need to change the sort key and are fine with the queries always happening within a single partition.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scans and Queries: Another option is to use the Scan and Query operations provided by DynamoDB. These operations allow you to retrieve data from your table based on any attribute, but they can be less efficient than using a well-designed index. Scans and queries can be useful when you need to perform ad-hoc queries or retrieve data that doesn’t fit easily into a predefined index.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamic Attributes: You can also make your schema more flexible by allowing dynamic attributes. This allows you to add arbitrary new attributes to your table, allowing you to store more information on your items, and potentially, enable new access patterns with it. For instance, you can create an attribute of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and add data in the form of key value pairs. In the below schema, dynamic_attribute is a map and it can store any additional information that might be required about a customer&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;pk&quot;: &quot;customer#1&quot;,
    &quot;sk&quot;: &quot;info&quot;,
    &quot;name&quot;: &quot;John Smith&quot;,
    &quot;email&quot;: &quot;john.smith@test.com&quot;,
    &quot;dynamic_attribute&quot;: {
        &quot;phoneNumber&quot;: &quot;+31 67777777&quot;,
        &quot;address&quot;: &quot;123 some street, 3332AA&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
&lt;!-- /wp:heading {&quot;level&quot;:2} --&gt;
&lt;!-- wp:paragraph --&gt;
It’s important to keep in mind that adding new access patterns to an existing table can have an impact on the performance and cost of your application, so you should carefully evaluate any changes you make. For example, creating new GSIs can increase the amount of data stored in your table and the read/write capacity needed to support them.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:2} --&gt;
&lt;h2 id=&quot;guidance-for-creating-partition-key-for-high-volume-applications&quot;&gt;Guidance for creating partition key for high volume applications&lt;/h2&gt;
&lt;!-- /wp:heading {&quot;level&quot;:4} --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;When you choose an appropriate partition key, it should be chosen in such a way that it naturally distributes the requests across partitions in an even manner. This can be achieved by choosing a partition key that has a high cardinality, meaning that it has a large number of unique values. This will ensure that the requests are spread across multiple partitions and reduce the chance of a hot partition (more about this is explained below).
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;For example, if you have an e-commerce application and want to store information about different products, you could choose the product id as a partition key. This would ensure that the requests for different products are spread across different partitions and would reduce the chance of a hot partition.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Another example is if you have a customer data on DynamoDB and you have customer Id as partition key but most of the requests are for a specific customer then customer Id partition will become hot partition. To avoid this, you can use salted partition keys, where you add some random value to partition key before storing, this will ensure that requests are spread across all partitions.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:2} --&gt;
&lt;h2 id=&quot;consequences-of-bad-design&quot;&gt;Consequences of bad design&lt;/h2&gt;
&lt;!-- /wp:heading {&quot;level&quot;:2} --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;There are consequences of wrong choice of partition keys. A wrong choice may lead to a specific partition to be accessed over and over again resulting in creating a so called “Hot partition”.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;
&lt;h4 id=&quot;hot-partition&quot;&gt;Hot Partition&lt;/h4&gt;
&lt;!-- /wp:heading {&quot;level&quot;:3} --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Hot partition can occur when the access patterns of a single table design are not well-distributed across the table’s partition key, resulting in a disproportionate number of requests going to a single partition. This can cause performance issues, such as increased latency and throttling.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;A common cause of hot partitions is when the access pattern is not evenly distributed. For example, if most of the requests are for a specific partition key value then that partition will become hot.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;
&lt;h4 id=&quot;mitigation-techniques&quot;&gt;Mitigation techniques&lt;/h4&gt;
&lt;!-- /wp:heading {&quot;level&quot;:3} --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;There are several ways to mitigate hot partitions in DynamoDB Single Table Design:
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scaling:&lt;/strong&gt; One way to address hot partitions is to scale the read and write capacity of the table to handle the increased traffic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spread the access evenly:&lt;/strong&gt; By choosing an appropriate partition key and distributing the access patterns evenly across the partition key, you can reduce the likelihood of hot partitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use advanced partitioning techniques:&lt;/strong&gt; By using advanced partitioning techniques like dynamic partitioning, where the partition key is computed at runtime based on the data, you can also reduce the likelihood of hot partitions. More on this a later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use Time To Live (TTL) attribute:&lt;/strong&gt; you can use DynamoDB’s TTL feature to automatically delete old data, which can help to avoid hot partitions caused by stale data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use read replicas:&lt;/strong&gt; If you are using a single table design and the read hot partition is a concern, you can make use of read replicas. This will replicate the data to multiple tables and read requests can be distributed across them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;
&lt;h3 id=&quot;dynamic-partitioning&quot;&gt;Dynamic partitioning&lt;/h3&gt;
&lt;!-- /wp:heading {&quot;level&quot;:3} --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Dynamic partitioning in DynamoDB is a technique that allows you to spread data across multiple partitions by changing the partition key based on the data. This can be useful when dealing with large amounts of data, or when you expect the access patterns to change over time.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;One way to achieve dynamic partitioning in DynamoDB is to use a computed partition key. For example, instead of using a simple partition key like a user ID, you could use a hash of the user ID combined with a timestamp. This way, new items with the same user ID will be spread across different partitions based on the timestamp, reducing the chance of a hot partition caused by a monotonically increasing partition key.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Another way to achieve dynamic partitioning is to use a partition key that is derived from the data. For example, if you are storing documents, you could use the first letter of the document title as the partition key. This way, the data will be spread across partitions based on the first letter of the title, and the access patterns will be evenly distributed.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Here is an example of how you could use dynamic partitioning to store tweets in DynamoDB:
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var date = DateTime.Now;
var timestamp = date.Ticks;
var tweetText = &quot;This is my tweet!&quot;;
var tweetUserId = &quot;1001&quot;;

using (var md5 = MD5.Create())
{
    var hash = md5.ComputeHash(Encoding.UTF8.GetBytes(tweetUserId));
    var partitionKey = $&quot;tweet_{BitConverter.ToString(hash).Replace(&quot;-&quot;, &quot;&quot;)}_{timestamp}&quot;;
    var doc = new Document();
    doc[&quot;partitionKey&quot;] = partitionKey;
    doc[&quot;tweet&quot;] = tweetText;
    doc[&quot;tweetUserId&quot;] = tweetUserId;
    var client = new AmazonDynamoDBClient();
    var request = new PutItemRequest
    {
        TableName = &quot;tweets&quot;,
        Item = doc
    };
    var response = await client.PutItemAsync(request);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;here the partition key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partitionKey&lt;/code&gt; is generated by concatenating the hash of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tweetUserId&lt;/code&gt; and a timestamp. This ensures that tweets by the same tweet user are spread across different partitions based on the timestamp and not clustered on the same partition key, thus reducing the chance of hot partition.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:heading {&quot;level&quot;:2} --&gt;
&lt;h2 id=&quot;when-to-avoid-single-table-design&quot;&gt;When to avoid single table design&lt;/h2&gt;
&lt;!-- /wp:heading {&quot;level&quot;:3} --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;While single table design in DynamoDB can be powerful and efficient for many types of applications, there are certain cases where it may not be the best choice. Here are a few examples of when a single table design might not be suitable:
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applications with highly relational data:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Single table design can work well for storing denormalized data, but if your data has complex relationships and you need to perform joins across tables, a single table design may not be the best option. In this case, it may be more appropriate to use a relational database like Amazon RDS or MySQL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applications with very high write loads:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Single table design allows you to horizontally scale your read and write capacity, but if your application requires extremely high write loads, it may be more cost-effective to use a different storage solution that is optimized for write-intensive workloads, such as Amazon S3 or Amazon Redshift.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applications that need advanced query capabilities:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;While single table design can support complex filtering and sorting using global secondary indexes and Elasticsearch, some applications may require more advanced querying capabilities like geospatial indexing and full-text search. In this case, it might be more appropriate to use a different database solution such as Amazon Elasticsearch service or Amazon RDS for PostgreSQL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applications that need to support very large items:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;DynamoDB has a limit of 400 KB for item size. If your item size is likely to exceed this limit, then you may need to consider using a different storage solution like Amazon S3 or Amazon Redshift&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Applications with unpredictable access patterns:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Single table design is based on the primary key, if the access patterns are not predictable it could lead to uneven distribution of the data and cause hot partitions. In this case, you might want to consider using a different database solution like Amazon RDS, which allows you to create read replicas to handle uneven read workloads.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The article is quite long, however I believe I’ve just scratched the surface of this design technique. For further reading I would advise to refer to the &lt;a href=&quot;https://docs.aws.amazon.com/dynamodb/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;https://docs.aws.amazon.com/dynamodb/index.html&quot;&gt;AWS documentation on DynamoDB&lt;/a&gt; and watch &lt;a href=&quot;https://www.youtube.com/watch?v=Xn12QSNa4RE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;https://www.youtube.com/watch?v=Xn12QSNa4RE&quot;&gt;this video&lt;/a&gt; (a bit lengthy, but worth watching) by Rick Houlihan where he explained the technique quite nicely.
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Please &lt;a href=&quot;https://ashishvegaraju.com/contact&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;https://ashishvegaraju.com/contact&quot;&gt;contact me&lt;/a&gt; if you have any questions on this topic and feel free to share it with others if you think it is useful!
&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>avegaraju</name></author><category term="Single table design" /><category term="AWS" /><category term="dynamoDB" /><summary type="html"></summary></entry><entry><title type="html">Aws Dynamodb Single Table Design.md</title><link href="/2023/01/13/AWS-DynamoDB-Single-table-design.md/" rel="alternate" type="text/html" title="Aws Dynamodb Single Table Design.md" /><published>2023-01-13T00:00:00+01:00</published><updated>2023-01-13T00:00:00+01:00</updated><id>/2023/01/13/AWS-DynamoDB-Single-table-design.md</id><content type="html" xml:base="/2023/01/13/AWS-DynamoDB-Single-table-design.md/">&lt;head&gt;
	
&lt;/head&gt;
&lt;body&gt;

# &lt;span style=&quot;text-transform: capitalize&quot;&gt; AWS DynamoDb : A tale of single table

&lt;span style=&quot;font-size:xx-large&quot;&gt;W&lt;/span&gt;hen it comes to designing a data store for your application, there are many options to choose from, each with its own set of advantages and disadvantages. One option that is gaining popularity among developers is using a single table of Amazon DynamoDB. Also, Amazon strongly recommends designing single table for most of the applications. We recently experimented with using a single table for one of our applications and this through this article, I will be sharing my experience. I will be discussing the advantages and limitations of using a single table design, as well as the best practices that I researched and learned along the way. We ended up using basic modeling techniques at work, however this article is intended to also share the research I did about some advanced single table design techniques and possible pitfalls. Whether you're just getting started with DynamoDB or are a seasoned developer, this article will provide valuable insights into how to effectively use a single table design. 

Its always best to come to a common understanding of what is meant by single table design. So Let's start from basics:

&lt;H2&gt;Introduction : What is Single table design&lt;/H2&gt;

In DynamoDB, single-table design is a method of storing all data in a single table, rather than using multiple tables for different data types or use cases. This approach is achieved by using a composite primary key, which consists of both a partition key and a sort key.
A composite primary key allows you to store multiple data types or entities in a single table, while still being able to retrieve and query data efficiently. 

For example, imagine you have an e-commerce application and you want to store data about customers, orders, and products. With single-table design, you could store all of this data in a single DynamoDB table, using the partition key to distinguish between different types of data, and the sort key to sort data within each partition.
Here's an example of how you might set up a table:

```
| partition key  | sort key     | other attributes|
---------------------------------------------------
| &quot;customer&quot;     | &quot;customer_id&quot;| name, address, etc|
---------------------------------------------------
| &quot;order&quot;        | &quot;order_id&quot;   | customer_id, total, etc |
---------------------------------------------------
| &quot;product&quot;      | &quot;product_id&quot; | name, price, etc       |

```

In this example, the partition key is &quot;entity&quot; and the sort key is &quot;entity_id&quot; . This table can have many other attributes like name, address, price etc. Using this structure, you can retrieve all orders  by using the &quot;order&quot; partition key and order_id as the sort key. Or you can retrieve all product details for a specific product by using &quot;product&quot; as the partition key and the product_id as the sort key.

With basic definition out of our way, lets dive into the bend of mind that is required to design such a table. Before starting to design a table you have to come up with ways in which you'd like to access data from this table. This is commonly known as &quot;Access Pattern&quot;. In fact, in the previous paragraph what you read about retrieving data with the help of partition and sort keys are indeed access patterns. Coming up with access patterns at the beginning helps to model the table better.

## Access Patterns explained

Needless to say, just having a partition and sort key on a table cannot support all the possible access patterns. For instance, what if I want to retrieve all orders for a given customer. As you can see in the above table, there is no way you can query that information. This is where GSIs, short form for Global Secondary Index comes to rescue. 

Let's take a look at GSIs and try to understand that with help of an example.

### Global Secondary Indexes

A global secondary index (GSI) in Amazon DynamoDB is a secondary index that has a different partition key than the primary key of the table. This allows you to create and maintain one or more secondary indexes on your DynamoDB table in addition to the primary index.

Using the same example mentioned before, let's say you want to query all orders for a give customer_id then you might want to create a GSI on the table to support this access pattern. This GSI would have customer_id as the primary key. 

&gt;I am using [No Sql Workbench](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/workbench.settingup.html &quot;NoSQL Workbench&quot;) to model the database table below. I highly recommend to use this tool for modeling, as it makes it easy to quickly visualize the changes made on the model.

Pictures are worth 1000 words, so here is a screenshot of how the table is designed with primary and sort key with different attributes. 

![image](../images/blog/table-with-attributes.jpg &quot;Basic table&quot;)

Here is the screenshot of GSI to support the access pattern of accessing orders based on a customer_id

![image](../images/blog/gsi-orders-by-customer.jpg &quot;GSI&quot;)

I added some dummy data to show how the GSI was able to support our access pattern.

![image](../images/blog/aggregate-view.jpg &quot;Aggregate View&quot;)

As you can see, the GSI made customer id as the primary key and projected all other attributes related to order in this view.

Similarly its is easy to create GSIs to support additional patterns in future.

GSI is not the only way to support additional access patterns, there are two more ways to support additional access patterns:

* Local Secondary Index (LSI): Similar to GSI but only allows to use the same partition key but different sort key. It can be useful if you only need to change the sort key and are okay with the queries always happening within a single partition.

* Scans and Queries: Another option is to use the Scan and Query operations provided by DynamoDB. These operations allow you to retrieve data from your table based on any attribute, but they can be less efficient than using a well-designed index. Scans and queries can be useful when you need to perform ad-hoc queries or retrieve data that doesn't fit easily into a predefined index.

* Dynamic Attributes: You can also make your schema more flexible by allowing dynamic attributes. This allows you to add arbitrary new attributes to your table, allowing you to store more information on your items, and potentially, enable new access patterns with it. For instance, you can create an attribute of type `map` and add data in the form of key value pairs. In the below schema, dynamic_attribute is a map and it can store any additional information that might be required about a customer

```
{
    &quot;pk&quot;: &quot;customer#1&quot;,
    &quot;sk&quot;: &quot;info&quot;,
    &quot;name&quot;: &quot;John Smith&quot;,
    &quot;email&quot;: &quot;john.smith@test.com&quot;,
    &quot;dynamic_attribute&quot;: {
        &quot;phoneNumber&quot;: &quot;+31 67777777&quot;,
        &quot;address&quot;: &quot;123 some street, 3332AA&quot;
    }
}
```

**Note**

It's important to keep in mind that adding new access patterns to an existing table can have an impact on the performance and cost of your application, so you should carefully evaluate any changes you make. For example, creating new GSIs can increase the amount of data stored in your table and the read/write capacity needed to support them.


## Guidance for creating partition key for high volume applications

When you choose an appropriate partition key, it should be chosen in such a way that it naturally distributes the requests across partitions in an even manner. This can be achieved by choosing a partition key that has a high cardinality, meaning that it has a large number of unique values. This will ensure that the requests are spread across multiple partitions and reduce the chance of a hot partition (more about this is explained below).

For example, if you have an e-commerce application and want to store information about different products, you could choose the product id as a partition key. This would ensure that the requests for different products are spread across different partitions and would reduce the chance of a hot partition.

Another example is if you have a customer data on DynamoDB and you have customer Id as partition key but most of the requests are for a specific customer then customer Id partition will become hot partition. To avoid this, you can use salted partition keys, where you add some random value to partition key before storing, this will ensure that requests are spread across all partitions.


## Consequences of bad design

There are consequences of wrong choice of partition keys. A wrong choice may lead to a specific partition to be accessed over and over again resulting in creating a so called &quot;Hot partition&quot;.

#### Hot Partition

Hot partition can occur when the access patterns of a single table design are not well-distributed across the table's partition key, resulting in a disproportionate number of requests going to a single partition. This can cause performance issues, such as increased latency and throttling.

A common cause of hot partitions is when the partition key is not chosen or used correctly. For example, if the partition key is chosen based on a monotonically increasing value, such as a timestamp, then all new items will be added to the same partition, causing a hot partition.

Another common cause of hot partitions is when the access pattern is not evenly distributed. For example, if most of the requests are for a specific partition key value then that partition will become hot.

#### Mitigation techniques

There are several ways to mitigate hot partitions in DynamoDB Single Table Design:

* **Scaling:** One way to address hot partitions is to scale the read and write capacity of the table to handle the increased traffic.

* **Spread the access evenly:** By choosing an appropriate partition key and distributing the access patterns evenly across the partition key, you can reduce the likelihood of hot partitions.

* **Use advanced partitioning techniques:** By using advanced partitioning techniques like dynamic partitioning, where the partition key is computed at runtime based on the data, you can also reduce the likelihood of hot partitions. More on this a later.

* **Use Time To Live (TTL) attribute:** you can use DynamoDB's TTL feature to automatically delete old data, which can help to avoid hot partitions caused by stale data.

* **Use read replicas:** If you are using a single table design and the read hot partition is a concern, you can make use of read replicas. This will replicate the data to multiple tables and read requests can be distributed across them.


### Dynamic partitioning

Dynamic partitioning in DynamoDB is a technique that allows you to spread data across multiple partitions by changing the partition key based on the data. This can be useful when dealing with large amounts of data, or when you expect the access patterns to change over time.

One way to achieve dynamic partitioning in DynamoDB is to use a computed partition key. For example, instead of using a simple partition key like a user ID, you could use a hash of the user ID combined with a timestamp. This way, new items with the same user ID will be spread across different partitions based on the timestamp, reducing the chance of a hot partition caused by a monotonically increasing partition key.

Another way to achieve dynamic partitioning is to use a partition key that is derived from the data. For example, if you are storing documents, you could use the first letter of the document title as the partition key. This way, the data will be spread across partitions based on the first letter of the title, and the access patterns will be evenly distributed.

Here is an example of how you could use dynamic partitioning to store product reviews in DynamoDB:

```
using Amazon.DynamoDBv2.DocumentModel;
using Amazon.DynamoDBv2.Model;
using Amazon.Runtime;
using System;
using System.Security.Cryptography;
using System.Text;

var date = DateTime.Now;
var timestamp = date.Ticks;
var productId = &quot;1001&quot;;
var review = &quot;This is my product review!&quot;;
var reviewerId = &quot;2002&quot;;

using (var md5 = MD5.Create())
{
    var hash = md5.ComputeHash(Encoding.UTF8.GetBytes(reviewerId));
    var partitionKey = $&quot;product_review_{BitConverter.ToString(hash).Replace(&quot;-&quot;, &quot;&quot;)}_{timestamp}&quot;;
    var doc = new Document();
    doc[&quot;partitionKey&quot;] = partitionKey;
    doc[&quot;review&quot;] = review;
    doc[&quot;product_id&quot;] = productId;
    doc[&quot;reviewer_id&quot;] = reviewerId;
    var client = new AmazonDynamoDBClient();
    var request = new PutItemRequest
    {
        TableName = &quot;reviews&quot;,
        Item = doc
    };
    var response = await client.PutItemAsync(request);
    if (response.HttpStatusCode == System.Net.HttpStatusCode.OK)
    {
        Console.WriteLine(&quot;Success&quot;);
    }
    else
    {
        Console.WriteLine(&quot;Error: &quot; + response.HttpStatusCode);
    }
}

```

In this example, the partition key partitionKey is generated by concatenating the hash of the reviewer id and a timestamp. This ensures that reviews for the same product and by the same reviewer are spread across different partitions based on the timestamp and not clustered on the same partition key, thus reducing the chance of hot partition.


## When to avoid single table design

While single table design in DynamoDB can be powerful and efficient for many types of applications, there are certain cases where it may not be the best choice. Here are a few examples of when a single table design might not be suitable:

* **Applications with highly relational data:**

	Single table design can work well for storing denormalized data, but if your data has complex relationships and you need to perform joins across tables, a single table design may not be the best option. In this case, it may be more appropriate to use a relational database like Amazon RDS or MySQL.
	
* **Applications with very high write loads:** 

	Single table design allows you to horizontally scale your read and write capacity, but if your application requires extremely high write loads, it may be more cost-effective to use a different storage solution that is optimized for write-intensive workloads, such as Amazon S3 or Amazon Redshift.
	
* **Applications that need advanced query capabilities:** 

	While single table design can support complex filtering and sorting using global secondary indexes and Elasticsearch, some applications may require more advanced querying capabilities like geospatial indexing and full-text search. In this case, it might be more appropriate to use a different database solution such as Amazon Elasticsearch service or Amazon RDS for PostgreSQL.
	
* **Applications that need to support very large items:** 

	DynamoDB has a limit of 400 KB for item size. If your item size is likely to exceed this limit, then you may need to consider using a different storage solution like Amazon S3 or Amazon Redshift
	
* **Applications with unpredictable access patterns:**

	Single table design is based on the primary key, if the access patterns are not predictable it could lead to uneven distribution of the data and cause hot partitions. In this case, you might want to consider using a different database solution like Amazon RDS, which allows you to create read replicas to handle uneven read workloads.

&lt;/body&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Test doubles ; Over the wire</title><link href="/2019/03/01/test-doubles-over-the-wire/" rel="alternate" type="text/html" title="Test doubles ; Over the wire" /><published>2019-03-01T00:09:00+01:00</published><updated>2019-03-01T00:09:00+01:00</updated><id>/2019/03/01/test-doubles-over-the-wire</id><content type="html" xml:base="/2019/03/01/test-doubles-over-the-wire/">&lt;!-- wp:paragraph {&quot;customFontSize&quot;:12} --&gt;
&lt;p style=&quot;font-size:12px;&quot;&gt;&lt;strong&gt;Please note&lt;/strong&gt;: If the code snippets in this article are not visible on your mobile browser then try to view this article with &lt;em&gt;Desktop site&lt;/em&gt; option enabled.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph {&quot;dropCap&quot;:true} --&gt;
&lt;p class=&quot;has-drop-cap&quot;&gt;Developing microservices is complex and testing its integration is even  more complex. Assuring availability of all the inter-dependent services with up-to-date builds in the test environment is quite a tedious &amp;amp; costly setup to maintain. Stubs and mocks on the other hand are cheap, easily maintainable and they make integration tests predictable and repeatable. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Almost two years ago, we faced a problem at work where we were desperately looking for a solution to test multiple Web API interactions with an external system over HTTP. In short, we wanted a hassle free mechanism to stub and verify invocation of an external service. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;We researched and came across &lt;a href=&quot;http://www.mbtest.org/&quot;&gt;Mountebank&lt;/a&gt;, which was not only painful to configure, but was error prone too. To top it all off, configuring dynamic behavior required enabling javascript injection. No points for guessing, the security team of my company outrightly rejected the request to enable javascript injection on any of our servers. Not to mention, no clean way to deploy and integrate it with our CI/CD pipelines. Later, due to various constraints, we decided to spend our time on delivering new features instead of solving this problem. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Feeling dejected, I started &lt;a href=&quot;https://github.com/avegaraju/Imposter&quot;&gt;imposter&lt;/a&gt; project in my free time with an intent to develop a simple, developer friendly stubbing and mocking mechanism. The project is now in a decent enough state to deserve a blog article.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Without further ado, in this article I will demonstrate how to create and configure stubs &amp;amp; mocks using the &lt;a href=&quot;https://github.com/avegaraju/Imposter&quot;&gt;imposter&lt;/a&gt; project. Let's begin with configuring and creating stubs.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;
&lt;h3&gt;Configuring &amp;amp; creating stubs&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;To configure a stub, you need to reference &lt;a href=&quot;https://www.nuget.org/packages/Appify.FluentImposter.AspnetCore/&quot;&gt;FluentImposter.AspNetCore package&lt;/a&gt;. This package contains an ASP.Net middleware &lt;code&gt;UseStubImposters&lt;/code&gt;, to configure stubs. All you need to do is to configure it in the &lt;code&gt;Startup.cs&lt;/code&gt; as shown below:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/2e0e4c12d21a0a15d706fc6b0a514161.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;code&gt;ImpostersAsStubConfiguration&lt;/code&gt;, as the name suggests, accepts a list of imposters-as-stubs. These imposters are hosted as REST endpoints by the middleware. To demonstrate, let's create an imposter which will stub the &lt;code&gt;Orders&lt;/code&gt; REST endpoint. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/505104b11cb45fda1bd0e7dca0b68f48.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Being a fan of fluent APIs, I made the &lt;code&gt;ImposterDefinition&lt;/code&gt; fluent. I like the idea of an API guiding me about the next steps. To begin with, it guides to define a resource to be stubbed, followed by a set of conditions that must match for the imposter to accept a request and respond with a canned response.  In this example, if the request body contains &lt;code&gt;Product:1234&lt;/code&gt; then  this imposter will return a pre-configured response.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Creating Pre-configured responses.&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The &lt;code&gt;ResponseBuilder&lt;/code&gt; helps to build the canned response. The code is pretty straight forward. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/9c71b7d3b946211332bc51220b67737b.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;As shown in the below POSTMan screenshot, the &lt;code&gt;Orders&lt;/code&gt; imposter endpoint is responding with a preconfigured response and a &lt;code&gt;Created (201)&lt;/code&gt; status code because the request body has the content &lt;code&gt;Product:1234&lt;/code&gt;. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {&quot;id&quot;:676} --&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;https://ashishvegaraju.files.wordpress.com/2019/02/image.png&quot; alt=&quot;&quot; class=&quot;wp-image-676&quot; /&gt;&lt;figcaption&gt;The screen shot is of PostMan invoking Orders imposter and receiving a pre-configured response.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Let's move on to configure and create an imposter as a mock.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;
&lt;h3&gt;Configuring &amp;amp; creating mocks&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The same package&lt;a href=&quot;https://www.nuget.org/packages/Appify.FluentImposter.AspnetCore/&quot;&gt;&amp;nbsp;FluentImposter.AspNetCore package&lt;/a&gt;  has another middleware &lt;code&gt;UseMockImposters&lt;/code&gt;, which is capable of configure and hosting mocks. Example shown below:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/02cf07d5aa9fa748e009e99dbfc44bd6.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Mocking requires invocation verification, hence a backing store is needed to keep the count of REST endpoint invocations. At the time of writing this article, I've only added support for &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;Amazon DynamoDb&lt;/a&gt; as a backing store which can be enable by adding   &lt;br /&gt;&lt;a href=&quot;https://www.nuget.org/packages/Appify.FluentImposter.DataStore.AwsDynamoDb/&quot;&gt;Appify.FluentImposter.DataStore.AwsDynamoDb&lt;/a&gt; Nuget package in your project. In case you do not have an Amazon AWS account, you can work with &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html&quot;&gt;local DynamoDb installation&lt;/a&gt; as well. But be aware that local DynamoDb, as the name suggests, is good for local testing and not recommended for production use. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Below is how you can create a MocksDatStore which connects to local DynamoDb installation.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/8c050b7fafdd808e515be8355cc92c10.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;I wouldn't go into the details of this datastore. All that the &lt;code&gt;MocksDataStore&lt;/code&gt; should do is to return &lt;code&gt;AwsDynamoDbDataStore&lt;/code&gt; instance which does all the magic of maintaining request invocations.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The next step is to create Imposters for the REST endpoints. To demonstrate, lets create a mock for &lt;code&gt;api/Products&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/90378aac89406d5d6023a60635916969.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Let's spin up POSTMan and invoke &lt;code&gt;api/Products&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;As shown in the screen shot, the imposter responded with a canned response.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {&quot;id&quot;:688} --&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;https://ashishvegaraju.files.wordpress.com/2019/02/image-2.png&quot; alt=&quot;&quot; class=&quot;wp-image-688&quot; /&gt;&lt;figcaption&gt;POSTMan screenshot of invoking api/Products endpoint.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;!-- /wp:image --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Mock verification&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The &lt;code&gt;UseMockImposters&lt;/code&gt; middleware hosts a mock verification endpoint with resource path &lt;code&gt;mocks/verify&lt;/code&gt; accepting Http GET requests. The request body should contain the details of the REST endpoint for which invocation verification has to be done.  Below is how the invocation verification for &lt;code&gt;api/Products&lt;/code&gt; endpoint can be done using POSTMan&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {&quot;id&quot;:689} --&gt;
&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;https://ashishvegaraju.files.wordpress.com/2019/02/image-3.png&quot; alt=&quot;&quot; class=&quot;wp-image-689&quot; /&gt;&lt;figcaption&gt;Verification of invocation using POSTMan&lt;/figcaption&gt;&lt;/figure&gt;
&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The mock verification endpoint responds back with the resource invoked along with the total number of invocations so far. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Thanks for reading. I am actively working on this project from last few months and planning to support more protocols. If you have any suggestion or improvements for the project then do let me know via comments. If you want to contribute then feel free to create pull requests in &lt;a href=&quot;https://github.com/avegaraju/Imposter&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><author><name>avegaraju</name></author><category term="fakes" /><category term="integration testing" /><category term="Microservice testing" /><category term="mocks" /><category term="stubs" /><category term="test doubles over the wire" /><category term="test driven development" /><summary type="html">Please note: If the code snippets in this article are not visible on your mobile browser then try to view this article with Desktop site option enabled.</summary></entry><entry><title type="html">Function Purity in F#</title><link href="/2018/12/24/function-purity-in-f/" rel="alternate" type="text/html" title="Function Purity in F#" /><published>2018-12-24T23:44:00+01:00</published><updated>2018-12-24T23:44:00+01:00</updated><id>/2018/12/24/function-purity-in-f</id><content type="html" xml:base="/2018/12/24/function-purity-in-f/">&lt;!-- wp:paragraph --&gt;
&lt;p&gt;In my last article about &lt;a href=&quot;https://ashishvegaraju.com/2018/09/24/functional-domain-modeling/&quot;&gt;Functional domain modeling&lt;/a&gt;, I explored the expressiveness of F# in modeling a domain. I fell in love with the simplicity and expressiveness of the language. In this article I will attempt to explore function purity in F#. In F#, functions are first class citizens because it allows to pass function as an argument to other function, return a function or assign function to a variable. Initially I found it a bit hard to wrap my head around the concept of treating functions as first class citizens. In fact one of the biggest challenge for me was surprisingly not the weird syntax of F#, but to think in terms of functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Coming from an OO background and not very comfortable with F#, below was my first attempt to write a use case. I basically tried to mimic a use case in a typical ports and adapters project from one of the C# projects. This use case serves a basic purpose which is to update the dimensions of a product, if it exists, of course.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/18a503c2351100ee5c3568efc8426f49.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Pretty straight forward. The use case accepts a &lt;code&gt;DataStore&lt;/code&gt; dependency using which the &lt;code&gt;update&lt;/code&gt; method can query the &lt;code&gt;Products&lt;/code&gt; table for existence of a product. If the product is found then the product is fetched from the data store and dimensions are updated. Finally, the product with updated dimensions is persisted in the database using the data store.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Though this use case works, there are several problems with this way of writing code. Lets take a look at the problems:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;&lt;strong&gt;Testability&lt;/strong&gt;&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;The code above is not easily testable. Why you ask? Lets look at how many ways things can go wrong with this code.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;
&lt;ol&gt;&lt;li&gt;What if the constructor arguments are null?&lt;/li&gt;&lt;li&gt;What if the &lt;code&gt;productExists&lt;/code&gt; data store method returns an exception.&lt;/li&gt;&lt;li&gt;What if &lt;code&gt;updateDimensions&lt;/code&gt;, which in turn calls &lt;code&gt;getProduct&lt;/code&gt; and &lt;code&gt;updateProduct&lt;/code&gt; methods on the data store returns exception?&lt;/li&gt;&lt;li&gt;What if the product does not exist?&lt;/li&gt;&lt;li&gt;What if product dimensions does not exist?&lt;/li&gt;&lt;li&gt;what if ....&lt;/li&gt;&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;and the list will go on ..&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;So many scenarios to test with just one dependency. What if I add &lt;code&gt;ExternalService&lt;/code&gt; as another dependency to this use case? Imagine the number of ways this third party service call can go wrong. The point is that whenever we deal with external systems, be it database or an external service, we are entering a world of uncertainty and we do not have much control over the behavior of those external systems. It would be nice if the use case and the domain model could completely avoid any type of IO operations or side affects. Sounds like a nice idea, but a use case which does not perform IO is next to useless. Stay with me and we will explore a way to minimize or avoid IO and side affects in the use case and domain model by the end of this article.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Hidden dependencies&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;One of the beautiful things about F# is its expressiveness. The &lt;code&gt;update&lt;/code&gt; method in our example is all but expressive about its intent. It has a dependency on &lt;code&gt;DataStore&lt;/code&gt; which is not evident when we look at the method signature. This is what I call as a hidden dependency. What if in future someone modifies the &lt;code&gt;update&lt;/code&gt; method and calls a completely different method on the datastore? Since the &lt;code&gt;update&lt;/code&gt; method is not expressive enough, developers can assume a lot of things. Is there a way to avoid these hidden dependencies? Can we make the update method a little more expressive to avoid mistakes by future developers? Again, by the end of this article, we will try to re-write the &lt;code&gt;update&lt;/code&gt; method to make it a little bit more expressive.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Referential Transparency&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Methods in our use case are not referentially transparent. Especially the &lt;code&gt;update&lt;/code&gt; method is not by any means. What is referential transparency? A function is referentially transparent if the function can be replaced with its corresponding value without affecting the behavior of the system. For example,&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:preformatted --&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;if, x + y = 10&lt;br /&gt;&lt;br /&gt;then, the expression x + y + z = 20 can be written as 10 + z = 20&lt;/pre&gt;
&lt;!-- /wp:preformatted --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;In our use case the method &lt;code&gt;update&lt;/code&gt;, depending on whether one of the data store methods return an exception, may or may not update the product dimensions. We can never assume that a call to &lt;code&gt;update&lt;/code&gt; method always updates product dimensions. Due to this uncertainty, I will not be able to include &lt;code&gt;update&lt;/code&gt; method in a method chain like this and assume that warehouse system will be always notified after the product dimensions update.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/53dd6dc264b22ae4664983445e567312.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;There are other smaller problems with this code. But for now, lets focus on fixing the problems that we identified above and making this use case a little bit better.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Here is an attempt to fix some of the problems we discussed above.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/1e90438e3ae2c7aa8905977a751d74aa.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;First thing worth noticing is that these functions are not inside a &lt;code&gt;type&lt;/code&gt; because there is no common dependency between these two functions. These functions exists on its own (under a module) and only accepts parameters that they can work with. The function name and signature are self documenting and they clearly communicate the intent. There is no scope of nasty exceptions bubbling up because of an unstable dependency. &lt;strong&gt;&lt;i&gt;These are pure functions&lt;/i&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Lets see how easy it is to test these functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/d8c27b1a3b8ef64cb5549e89115e5fca.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Simple and straightforward. There is no need to setup mocks for different scenarios here. You can create test data to your hearts content and test this function out. I have used &lt;a href=&quot;https://github.com/AutoFixture/AutoFixture&quot;&gt;Autofixture&lt;/a&gt;, but &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/property-based-testing/&quot;&gt;Property based tests&lt;/a&gt; are better suited for testing these functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Coming back to the referential transparency. The &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; functions are referentially transparent. For instance, if the &lt;code&gt;Product&lt;/code&gt; exists in the list of products then &lt;code&gt;find&lt;/code&gt; will always return the Product. Otherwise, it always returns &lt;code&gt;None&lt;/code&gt;, consistently.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;So, we have seen how getting rid of impure operations tremendously simplifies the program. But wait, this new shiny pure functional program does nothing useful. The end goal of this program is to update dimensions in the &lt;i&gt;database.&lt;/i&gt; How do we make sure that we stick to function purity but also be able to perform impure operations like persisting data in a database or calling a third party service etc? You need to do the following:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;
&lt;ol&gt;&lt;li&gt;Push IO (impure) functions at the boundary of your domain.&lt;/li&gt;&lt;li&gt;Call pure functions from the impure functions and not the other way round.&lt;/li&gt;&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:quote --&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;As long as an impure function calls a Pure function you are good. When a pure function calls an impure function then the whole method chain becomes impure.&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- /wp:quote --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;You would have guessed where we are going with this kind of separation between pure and impure functions. OK, no points for guessing, moving impure functions at the boundary and calling pure functions from there naturally leads you to &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;clean architecture&lt;/a&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Let's see how does the call to pure functions from an impure function looks like.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/e27a7abe2645023078015666fdf07b49.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;br /&gt;&lt;code&gt;tryUpdateProductDimensions&lt;/code&gt;is an impure function because it calls &lt;code&gt;getAllProducts&lt;/code&gt; which in turn calls &lt;code&gt;allProducts&lt;/code&gt; from the &lt;code&gt;DB&lt;/code&gt; module. &lt;code&gt;DB&lt;/code&gt; module performs a bunch of impure operations. We can call it as the core of impurity (pun intended). For the sake of completeness, here is how I have implemented the DB module.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/03d60370b3d794575affc1e505975c0c.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;For a developer who is not fully familiar with F# or the functional programming paradigm may quite easily fall into the pit of writing OO style code with F# just like me in the beginning of this article. In F#, separating impure functions from pure functions requires discipline. As I understand, F# has no in-built magic to prevent you from mixing pure and impure functions. Haskell in that respect is pretty strict because it forces you to wrap impure functions using an &lt;a href=&quot;https://wiki.haskell.org/Introduction_to_IO&quot;&gt;IO monadic system&lt;/a&gt;. In simple terms an IO monad is an abstract data structure which elevates a value. Once the value is elevated you can no longer access the original value. To access the original value, you must use one of the mapping functions of the monad. I can write a similar IO monad in F#, but is it really worth the effort? The F# compiler would not honor such an IO monad. Though I think that it may be a good idea to enforce it as a coding convention for your projects.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Let me know in the comments section below what you think about the IO system in Haskell. Should F# support something similar? If yes, why and if no why not?&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><author><name>Ashish Vegaraju</name></author><summary type="html">In my last article about Functional domain modeling, I explored the expressiveness of F# in modeling a domain. I fell in love with the simplicity and expressiveness of the language. In this article I will attempt to explore function purity in F#. In F#, functions are first class citizens because it allows to pass function as an argument to other function, return a function or assign function to a variable. Initially I found it a bit hard to wrap my head around the concept of treating functions as first class citizens. In fact one of the biggest challenge for me was surprisingly not the weird syntax of F#, but to think in terms of functions.</summary></entry><entry><title type="html">Functional Domain Modeling</title><link href="/2018/09/24/functional-domain-modeling/" rel="alternate" type="text/html" title="Functional Domain Modeling" /><published>2018-09-24T23:02:00+02:00</published><updated>2018-09-24T23:02:00+02:00</updated><id>/2018/09/24/functional-domain-modeling</id><content type="html" xml:base="/2018/09/24/functional-domain-modeling/">&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Lately, I've been reading about functional paradigm and related programming languages. More I read about it, more I feel that modeling domains in pure C# (or Java for that matter) is &lt;em&gt;unnatural&lt;/em&gt; and does not communicate the intent of the domain clearly.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;After so many years of writing C# code, that's quite a statement to make. But, I am serious. Lets model a simple subdomain &lt;strong&gt;Order&lt;/strong&gt; for a hypothetical e-commerce company using F# then later using C# and see which of the models looks more expressive.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Lets start with C# first. Below is a typical &lt;code&gt;Order&lt;/code&gt; entity with some typical properties.&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a0738e33f449f4fda4c11328293b5c95.js&quot;&gt; &lt;/script&gt;

&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;&lt;em&gt;(For brevity, I have removed other properties &amp;amp; methods which add behavior to this model.)&lt;/em&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;At first glance, this model looks decent. &lt;em&gt;Technically,&lt;/em&gt; it has all the properties required to represent an&amp;nbsp;&lt;code&gt;​​Order&lt;/code&gt;. It uses &lt;a href=&quot;https://martinfowler.com/bliki/UbiquitousLanguage.html&quot; data-mce-href=&quot;https://martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;ubiquitous language&lt;/a&gt; for modeling the domain, it uses strong types to represent attributes of an order (so, the smell of &lt;a href=&quot;http://wiki.c2.com/?PrimitiveObsession&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;http://wiki.c2.com/?PrimitiveObsession&quot;&gt;primitive obsession&lt;/a&gt; is also taken care of). The properties expose only public getters, so state change (if we choose to do so) is only possible via public methods. But, does this model document the design of Order subdomain? Can a developer look at this model and understand what are the business constraints in this sub-domain? The answer is No. Let's examine this model closely to see why.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;Lack of &lt;em&gt;Choice&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;The &lt;code&gt;PaymentMethod&lt;/code&gt; property is of type &lt;code&gt;IPaymentMethod&lt;/code&gt;. Typically, this interface would be implemented by concrete payment method classes like &lt;code&gt;​CashOnDelivery&lt;/code&gt;, &lt;code&gt;CreditCard&lt;/code&gt; &lt;code&gt;Paypal&lt;/code&gt; etc. But, this property does not &lt;em&gt;scream&lt;/em&gt; about all the supported payment methods of the order sub-domain.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Of course, I can always see what are the types implementing &lt;code&gt;IPaymentMethod&lt;/code&gt; interface, but, its well.. ehm... &lt;em&gt;unnatural&lt;/em&gt; ...(you will see why when we examine the F# model). In short, the payments methods are not explicitly documented &lt;em&gt;in the&lt;/em&gt; &lt;em&gt;model&lt;/em&gt;. Another problem with having an interface is that it does not allow the domain modeler to make the property hold different &lt;em&gt;types (or combination of types)&lt;/em&gt; of values depending on a particular payment method. For instance, in case of CreditCard, I would like the property to hold Card number &lt;em&gt;and&lt;/em&gt; CardType information, if the payment method is PayPal then the property should hold the paypal Id etc.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Another problem, though minor, is that we do not know if we are dealing with a closed set of payment methods. What if an innocent developer makes an &lt;em&gt;innocent&lt;/em&gt; mistake and adds &lt;code&gt;MyAwesomePaymentMethod&lt;/code&gt; as another implementation of &lt;code&gt;IPaymentMethod&lt;/code&gt;. So, now &lt;code&gt;Order&lt;/code&gt; is secretly supporting a new payment method and no one (include the innocent developer) has a clue about it.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Here comes F# for the rescue. F# has discriminated unions. In other words a &lt;em&gt;&lt;strong&gt;choice type,&lt;/strong&gt;&lt;/em&gt; which, if used, unambiguously documents about the only three supported payment methods available. In other words, its a &lt;em&gt;closed set&lt;/em&gt; of payment methods. Below is how the &lt;code&gt;PaymentMethod&lt;/code&gt; type would be modeled in F#. Looking at this file, one can see the complete spec of &lt;code&gt;PaymentMethod&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;
&lt;/em&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/bfae189f33aad1cd24498df4230eb521.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;If I want to print a payment method (Of course, I wouldn’t from a domain model, perhaps I would execute a function for each &lt;em&gt;matched&lt;/em&gt; payment method), I can &lt;em&gt;pattern match&lt;/em&gt; and print (or do something more useful) in here.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f5c6040682597f7535eba60962a62ea8.js&quot;&gt; &lt;/script&gt;

&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Notice how pattern matching allows us to return different information depending on&amp;nbsp; the &lt;em&gt;choice&lt;/em&gt; of payment method. In case of Paypal, I can use the PaypalId. Similarly, in case of &lt;code&gt;Card&lt;/code&gt; payment, I can use the card number and card type.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Coming back to C#, I can use pattern matching and try to mimic the F# &lt;em&gt;choice type&lt;/em&gt; behavior. But its ugly and convoluted (IDK why I am even mentioning it here :D ).&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/d53bccf85e229197c021c854b9b52437.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Stuck without &lt;em&gt;Option&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Let's take a good look at the C# domain model once again. Can you infer which properties are required and which are optional? Typically, an order may or may not have a discount code which makes the property &lt;code&gt;DiscountCode&lt;/code&gt; optional. But, the C# model fails to document that constraint. You may argue that &lt;code&gt;DiscountCode&lt;/code&gt; could be made &lt;code&gt;nullable&lt;/code&gt; and then all is good. But, is &lt;code&gt;null&lt;/code&gt; equivalent to &lt;em&gt;not having&lt;/em&gt; a discount code?&lt;/p&gt;
&lt;p&gt;In F#, we can use &lt;code&gt;​Option&amp;lt;'a&amp;gt;&lt;/code&gt; to denote an optional field as shown here:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/b296ebfa02ef75274e9409eeca9c4a3a.js&quot;&gt; &lt;/script&gt;

&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;This is a self documenting domain model. By looking at it I know that an order may or may not have &lt;code&gt;DiscountCode&lt;/code&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Luckily, &lt;a href=&quot;https://github.com/louthy/language-ext&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-mce-href=&quot;https://github.com/louthy/language-ext&quot;&gt;Language Ext&lt;/a&gt; package allows us to do this in C#. The &lt;code&gt;Order&lt;/code&gt; model in C# (using Language Ext) now looks like this:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/252c9d48dbb459594054edc01420786b.js&quot;&gt; &lt;/script&gt;

&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;Much better!&lt;/p&gt;
&lt;p&gt;As mentioned, an &lt;code&gt;​Option&lt;/code&gt; may or may not have a value. This is denoted with &lt;code&gt;​Some&lt;/code&gt; or​ &lt;code&gt;None&lt;/code&gt; respectively. Below is how one can inspect / match an &lt;code&gt;Option&lt;/code&gt; to see if it contains a &lt;code&gt;Some&lt;/code&gt; or a &lt;code&gt;None&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
&lt;/em&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/eef9b73057ef1a9cdfc9708dfbf9ae5f.js&quot;&gt; &lt;/script&gt;

&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;That's a short one on why I feel that functional languages are naturally good for modeling domains as they make domain models expressive and self documenting. I am still experimenting with a couple of functional languages and so far I can see clear benefits of functional languages over imperative languages when it comes to developing a project with domain driven design.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot; data-mce-style=&quot;text-align: justify;&quot;&gt;I am not sure how easy or painful it is to access database or perform I/O with a functional language. I would probably run into it at some point. Do share your experiences (good and /or painful) with functional languages under comments and Thanks for reading!&lt;/p&gt;</content><author><name>Ashish Vegaraju</name></author><summary type="html">Lately, I've been reading about functional paradigm and related programming languages. More I read about it, more I feel that modeling domains in pure C# (or Java for that matter) is unnatural and does not communicate the intent of the domain clearly. After so many years of writing C# code, that's quite a statement to make. But, I am serious. Lets model a simple subdomain Order for a hypothetical e-commerce company using F# then later using C# and see which of the models looks more expressive. Lets start with C# first. Below is a typical Order entity with some typical properties. 400: Invalid request (For brevity, I have removed other properties &amp;amp; methods which add behavior to this model.) At first glance, this model looks decent. Technically, it has all the properties required to represent an&amp;nbsp;​​Order. It uses ubiquitous language for modeling the domain, it uses strong types to represent attributes of an order (so, the smell of primitive obsession is also taken care of). The properties expose only public getters, so state change (if we choose to do so) is only possible via public methods. But, does this model document the design of Order subdomain? Can a developer look at this model and understand what are the business constraints in this sub-domain? The answer is No. Let's examine this model closely to see why. Lack of Choice The PaymentMethod property is of type IPaymentMethod. Typically, this interface would be implemented by concrete payment method classes like ​CashOnDelivery, CreditCard Paypal etc. But, this property does not scream about all the supported payment methods of the order sub-domain. Of course, I can always see what are the types implementing IPaymentMethod interface, but, its well.. ehm... unnatural ...(you will see why when we examine the F# model). In short, the payments methods are not explicitly documented in the model. Another problem with having an interface is that it does not allow the domain modeler to make the property hold different types (or combination of types) of values depending on a particular payment method. For instance, in case of CreditCard, I would like the property to hold Card number and CardType information, if the payment method is PayPal then the property should hold the paypal Id etc. Another problem, though minor, is that we do not know if we are dealing with a closed set of payment methods. What if an innocent developer makes an innocent mistake and adds MyAwesomePaymentMethod as another implementation of IPaymentMethod. So, now Order is secretly supporting a new payment method and no one (include the innocent developer) has a clue about it. Here comes F# for the rescue. F# has discriminated unions. In other words a choice type, which, if used, unambiguously documents about the only three supported payment methods available. In other words, its a closed set of payment methods. Below is how the PaymentMethod type would be modeled in F#. Looking at this file, one can see the complete spec of PaymentMethod type.</summary></entry><entry><title type="html">Test Driven Development with TypeScript</title><link href="/2016/10/31/test-driven-development-with-typescript/" rel="alternate" type="text/html" title="Test Driven Development with TypeScript" /><published>2016-10-31T00:05:00+01:00</published><updated>2016-10-31T00:05:00+01:00</updated><id>/2016/10/31/test-driven-development-with-typescript</id><content type="html" xml:base="/2016/10/31/test-driven-development-with-typescript/">&lt;p align=&quot;justify&quot;&gt;In this article, I will demonstrate how to write testable code using TypeScript. I assume that the reader is familiar with JavaScript, heard about Typescript and has done or secretly desires to do test driven development.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;There is an excellent &lt;a href=&quot;https://www.typescriptlang.org/docs/tutorial.html&quot;&gt;quick start guide&lt;/a&gt; on Typescript that I recommend you to go through before moving ahead.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Project Setup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I am writing the code in Visual Studio 2015 Update 2 (which already has the necessary ingredients to author TypeScript applications). You can also use Visual Studio Code for authoring web applications with TypeScript.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;1. Start Visual Studio and Create a new project. From the installed templates, select &lt;strong&gt;Html Application With TypeScript&lt;/strong&gt; template.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/project_template.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;Project_template&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/project_template_thumb.png&quot; alt=&quot;Project_template&quot; width=&quot;521&quot; height=&quot;365&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2. Notice how Visual Studio has done the required scaffolding for your first TypeScript application. In fact, if you press F5 on your keyboard, you will be able to run this application in your browser. Take some time here and see how closely TypeScript resembles an object oriented programming language. You’d see a class, a constructor method etc.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;3. When you are done with admiring the beauty of TypeScript, you may select the code in &lt;strong&gt;app.ts&lt;/strong&gt; and delete it. Since we are doing Test Driven Development, we will not be writing any Production code without accompanying tests!&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;4. In an enterprise project, you’d usually create a new Test Project in the solution. But for the purpose of this article and also to keep things simple in the beginning, I will just create a new folder called as “&lt;strong&gt;Tests&lt;/strong&gt;” under the same project and add a test file in it. .&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;The goal of the application is to calculate area of different shapes. I usually choose simple applications and simple domains to demonstrate new stuff. This helps in focusing more on the subject rather than focusing on details of the domain.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;At this point, I have renamed &lt;strong&gt;app.ts&lt;/strong&gt; to &lt;strong&gt;Rectangle.ts&lt;/strong&gt; and the test file name is &lt;strong&gt;RectangleTests.ts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image2.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;image&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image_thumb2.png&quot; alt=&quot;image&quot; width=&quot;409&quot; height=&quot;271&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Set up for writing Tests&lt;/h2&gt;
&lt;p align=&quot;justify&quot;&gt;To test TypeScript code, you’d need a testing framework. There are few popular frameworks available like Jasmine and QUnit. For the purpose of this article and also because at the time of writing this article, I couldn't find any example where typescript is used with QUnit and Chutzpah (more on that later), I decided to write this article using QUnit.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Go ahead and add Qunit-MVC via the package manager console.&lt;/p&gt;

&lt;div id=&quot;codeSnippetWrapper&quot; class=&quot;csharpcode-wrapper&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; class=&quot;csharpcode&quot;&gt;
&lt;pre class=&quot;alteven&quot;&gt;&lt;span id=&quot;lnum1&quot; class=&quot;lnum&quot;&gt;   1:&lt;/span&gt; Install-Package Qunit-MVC&lt;/pre&gt;
&lt;!--CRLF--&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;You’d also need a type definition file for Qunit. The purpose of type definition file (file with extension *.d.ts) is to let TypeScript know about the types that exist in an API. There is a github project called as &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;Definitely Typed&lt;/a&gt;,  which provides high quality type definitions for almost all JavaScript APIs.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Run below command to add the type definition file for QUnit.&lt;/p&gt;

&lt;div id=&quot;codeSnippetWrapper&quot; class=&quot;csharpcode-wrapper&quot;&gt;

&lt;!--CRLF--&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;Install-Package qunit.TypeScript.DefinitelyTyped&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;Apart from that, you’d need a test runner, where you can see your passing/failing tests. For that I am going to use &lt;a href=&quot;https://github.com/mmanela/chutzpah&quot;&gt;Chutzpah&lt;/a&gt;. To use Chutzpah in Visual studio you need to add an extension. Select &lt;strong&gt;Tools&lt;/strong&gt;&amp;gt;&lt;strong&gt;Extensions and Updates &lt;/strong&gt;and search for Chutzpah. (Since I already have Chutzpah extension added in my VS, I see the option to disable or uninstall it.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;image&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image_thumb.png&quot; alt=&quot;image&quot; width=&quot;526&quot; height=&quot;371&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Add chutzpah.json file in the root of your project. This json file provides a range of configuration for Chutzpah test runner. For the sake of simplicity, I am configuring the json file with very basic settings:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/39c4b175b706121f1a7fef34eab791e1.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;Compile Mode &lt;strong&gt;External&lt;/strong&gt; denotes that Chutzpah test runner can expect compiled .JS file in the default output directory. If you select mode as &lt;strong&gt;Executable &lt;/strong&gt;then you need to provide a powershell or bat file which will convert .ts files to .js file. In this project, I will use tsconfig.json file and configure it in such a way that visual studio will take care of generating a .js file while building (ctrl + shift + b) the project.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Add a file with name &lt;strong&gt;tsconfig.json&lt;/strong&gt; in the root of the project with below settings.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/7abfdf6818481183519962ce7c846e6e.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;With that in place, we are all set to write the tests.&lt;/p&gt;
&lt;h2&gt;The &lt;span style=&quot;color:#ff0000;&quot;&gt;Red&lt;/span&gt; &lt;span style=&quot;color:#008000;&quot;&gt;Green&lt;/span&gt; &lt;span style=&quot;color:#0000ff;&quot;&gt;Refactor&lt;/span&gt; Cycle&lt;/h2&gt;
&lt;p&gt;Open &lt;strong&gt;RectangleTests.ts&lt;/strong&gt; file and write you first failing test. Below is my first failing test.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/857c540752b3708614a7e47a807dd727.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There is no need to run tests. The project will not compile because I have not created the Rectangle class yet. A non-compiling class is equivalent to a failing test. So lets write just enough code to make this test pass.&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;Rectangle.ts&lt;/strong&gt; file and type below code:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/d80aba54cec4112de1ab75e811c74f00.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Perfect! This is exactly what we need to make the failing test pass. Lets run the test and confirm if our test is passing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image3.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;image&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image_thumb3.png&quot; alt=&quot;image&quot; width=&quot;419&quot; height=&quot;182&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that’s our Red and Green cycle in TDD. But, what about Refactor? As of now, I do not see any need to refactor the code.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot;&gt;Let’s write the next test. I would like the length and breadth of the rectangle to be passed as constructor argument to the Rectangle class, so lets add another test which passes length and breadth to the Rectangle class.&lt;/p&gt;
&lt;p style=&quot;text-align:justify;&quot;&gt;You'd notice that the project is not compiling because there is no constructor in the Rectangle class which accepts two arguments. To make the project compile, lets add a constructor to the Rectangle class:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/8006adf0eaf30604a3d7bf2a6e7b4bf6.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now lets run the tests again.&lt;/p&gt;

&lt;p&gt;But hey! Our first test is now failing! Because we do not have any blank constructor in the Rectangle class. At this point we need to do some &lt;span style=&quot;color:#1a1a1a;&quot;&gt;refactoring&lt;/span&gt;!&lt;/p&gt;

&lt;p&gt;Do we really need the first test? I would say &lt;strong&gt;No&lt;/strong&gt;, because with the new constructor, we are enforcing a contract that to calculate area of a Rectangle you need to provide length and breadth of the rectangle before hand. So lets &lt;strong&gt;delete &lt;/strong&gt;the first test.&lt;/p&gt;
&lt;blockquote&gt;&lt;span style=&quot;color:#1a1a1a;&quot;&gt;During the refactoring cycle, not only the production code, but the test code can and should be refactored. &lt;/span&gt;
&lt;p align=&quot;justify&quot;&gt;Tests deserve to be maintained to the same level of quality as the production code. Indeed, perhaps the tests deserve even more attention than the production code since the quality of the production code depends on the tests;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;-Bob Martin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point, I would skip demonstrating all the Red Green and refactor cycles that I went through to add the function which calculates the area of a rectangle. The reason I want to skip that is because I want to demonstrate an interesting concept called as “Stubbing”!&lt;/p&gt;
&lt;h2&gt;Stubbing&lt;/h2&gt;
&lt;p&gt;For those who are familiar with test driven development would know that unit tests without the ability to stub external dependencies are not of much use. To demonstrate stubbing in our example, I am introducing an external dependency, a webservice which helps in calculating the area of a triangle.&lt;/p&gt;
&lt;blockquote&gt;Area of Triangle = 1/2 (height * base)&lt;/blockquote&gt;
&lt;p&gt;In our hypothetical world, there exists a service, which if called, provides the height of the triangle. The requirement is that we call a web service to get the height value.&lt;/p&gt;

&lt;p&gt;To enable stubbing, we need to add typeMoq framework to the project. Using typeMoq, we can stub external dependencies and also use mocking to verify expectations on method calls.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;Install-Package typemoq&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s create a class with name TriangleTests.ts and write the first failing test.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/665ea1805d5ef5a2055d99a972e693d8.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;This class fails to compile, so lets quickly add Triangle.ts class with a constructor accepting base value:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/9af785f45ad02aabad7a256d9e0954f9.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Now, the tests should pass. Next, we need to somehow call a service from this class to get height of the triangle. This means, we need to add a new class which does the Ajax call to a hypothetical service. With that information, lets write our next test.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/b0cc4d4a6c38406abb006840cdf57d60.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Notice the usage of mock.object. At this point the project will not compile, so lets fix it and make the tests run. Add an interface in Triangle.ts file.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/140f24a92ce52eb0fa8f85442d14e58f.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and an empty class which implements this interface&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/40f0de21969bb8bc445205cd12e12e48.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Notice that we are not writing any implementation for this class. In fact, any attempt to invoke the performAjaxCall method on this class will throw an exception. At this point, we just want our test to pass which is using the mock object to stub an external dependency.&lt;/p&gt;

&lt;p&gt;Lets modify the Triangle class and add a new constructor argument:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/aeadc011c987d21f9c473568492fd134.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Notice the usage of IAjaxWrapper interface in the constructor argument, just like how its done in any object oriented language. Add below references in the test class. With these references, we are telling Chutzpah test runner where to find the typemoq library.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/294bb8f0958321a380adbe17abd2e234.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;With typemoq referenced in the test class, lets define our mock object.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/1c720bd0d64763f1cdb0f550c45690d8.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Below is the complete code:&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/ef8bd15ad5854a7cf3ec4cffc6425919.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;This test will pass!&lt;/p&gt;

&lt;p&gt;Let’s write the next test to actually calculate the area of triangle.&lt;/p&gt;
&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/ae4c98ec4387da063db5398ad97ca6a3.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;Notice how the performAjaxCall method is being set up to return a predefined height value. At this point, we do not care how AjaxWrapper is going to fetch the value of triangle’s height, all we know is that the performAjaxCall method is setup to provide that value. Notice we just need an interface, so that we can handle the dependency with fake implementation and move ahead with our tests.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Of course, this test will fail, because calculateArea method does not exist. Let’s fix that and make the test pass. Create a calculateArea method in the Triangle.ts class. Below is the code:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/97b608c380d51888cd808cc4c571d8bb.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This should be enough for the tests to pass.&lt;/p&gt;

&lt;p&gt;With that, I’d conclude this article. Hope the article was helpful.&lt;/p&gt;
&lt;h2&gt;Quick Tips&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Chutzpah can show test results on a web page. To view your tests in a browser, right click on the test file and from the context menu Select &lt;strong&gt;Run Chutzpah with &amp;gt; Debugger. &lt;/strong&gt;You can also put breakpoints and debug your tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image4.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;image&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image_thumb4.png&quot; alt=&quot;image&quot; width=&quot;268&quot; height=&quot;136&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You can check the code coverage of your TypeScript code. Below is the code coverage of TriangleTests.ts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image5.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;image&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2016/10/image_thumb5.png&quot; alt=&quot;image&quot; width=&quot;218&quot; height=&quot;218&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code for this demonstration can be found at my &lt;a href=&quot;https://github.com/avegaraju/TDDWithTypeScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github repository&lt;/a&gt;.&lt;/p&gt;</content><author><name>avegaraju</name></author><category term="chutzpah" /><category term="javascript" /><category term="mocking" /><category term="QUnit" /><category term="stubbing" /><category term="TDD" /><category term="test driven development" /><category term="typemoq" /><category term="typescript" /><category term="unit test" /><summary type="html">In this article, I will demonstrate how to write testable code using TypeScript. I assume that the reader is familiar with JavaScript, heard about Typescript and has done or secretly desires to do test driven development. There is an excellent quick start guide on Typescript that I recommend you to go through before moving ahead.</summary></entry><entry><title type="html">A WCF Chat Service &amp;amp; Client</title><link href="/2015/12/15/a-wcf-chat-service-client/" rel="alternate" type="text/html" title="A WCF Chat Service &amp;amp; Client" /><published>2015-12-15T17:33:00+01:00</published><updated>2015-12-15T17:33:00+01:00</updated><id>/2015/12/15/a-wcf-chat-service-client</id><content type="html" xml:base="/2015/12/15/a-wcf-chat-service-client/">&lt;p align=&quot;justify&quot;&gt;I attended a interview recently for which the pre-requisite was to develop a chat application using WCF as part of a &lt;em&gt;code challenge&lt;/em&gt;. The requirement was quite simple, so instead of taking the usual route of creating a WCF service and adding its reference to a client application, I decided to hand code everything without any configuration or service references!&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Of course the  assumption here is that the service and client applications are owned by a single company/team so that the contracts can be shared between the service and client.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;The complete code is available in my &lt;a href=&quot;https://github.com/avegaraju/WCFChatApp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; account.&lt;/p&gt;

&lt;h6&gt;The Problem Statement&lt;/h6&gt;
&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:c247d9f7-42bd-467e-a56a-5bb236a92f5d&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;text&quot; gutter=&quot;false&quot; light=&quot;true&quot;]
Goal - Create a Chat Server and Client application using 
.NET 4.0/4.5 with WCF as the communication mechanism. 
The Chat Server should be a standalone application and 
the Chat Client should be a standalone application with 
a basic UI for users to interact and exchange messages 
through the Chat server. Stability of the code is a 
must-have and it should be ensured that the 
Server/Client do not crash during operation to 
maintain quality user experience. 

The basic functionality to be supported is as follows: 

1. The chat server should open up a TCP port for
 listening to incoming client requests. 

2. The server should be able to handle at 
least 2 distinct clients’ communication in parallel. 

3. On successful connection with the server, 
the chat client should be able to send plain text 
messages to the server. 

4. The server should be able to respond to each 
message by a static message &amp;quot;Hello!&amp;quot; appended 
with the server's timestamp. 

5. Both chat clients should be able to communicate 
with the server without the messages of either being 
visible to the other one. 

[/sourcecode]

&lt;/div&gt;
&lt;h6 align=&quot;justify&quot;&gt;The Approach&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;Since the service contract has to be shared between the service and client the best place to create the service contract is in a common library project. I have created a “contract” folder which has few more sub folders having contracts for service, response, request,  fault and a contract for callback service (more on this later).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ashishvegaraju.files.wordpress.com/2015/12/image.png&quot;&gt;&lt;img style=&quot;background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;&quot; title=&quot;image&quot; src=&quot;http://ashishvegaraju.files.wordpress.com/2015/12/image_thumb.png&quot; alt=&quot;image&quot; width=&quot;299&quot; height=&quot;370&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;The Duplex Message Exchange Pattern via Callbacks&lt;/h6&gt;
&lt;p&gt;IEAChatService.cs is the service contract defined as shown below&lt;/p&gt;
&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:53f692e4-3830-4b21-bc23-0989a6240c9a&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
 [ServiceContract(
        SessionMode = SessionMode.Required, 
        CallbackContract= typeof(IChatCallback))]
 public interface IEAChatService
[/sourcecode]

&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;I have defined a CallbackContract for this service contract. This callback contract interface is defined in IChatCallback.cs and is implemented by the client application (EA.Client.EAChat.UI).&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:f5c8c95c-e1a9-4f44-83ac-bfef0512728e&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot; padlinenumbers=&quot;true&quot;]
    [ServiceContract]
    public interface IChatCallback
    {
        [OperationContract(IsOneWay=true)]
        void RefreshUserList(List&amp;lt;User&amp;gt; onlineUsers);

        [OperationContract]
        void ResponseMessage(ResponsePacket response);
    }
[/sourcecode]

&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;This contract is called as a duplex service contract. Duplex service contract is a message exchange pattern where service as well as client can send messages to other independently. Since this interface is implemented by client (EA.Client.EAChat.UI), the service can directly call the client methods. In this case, whenever a new user enters the chat room the &lt;em&gt;Register  &lt;/em&gt;method of the EAChatService.cs calls the callback method &lt;em&gt;RefreshUserList &lt;/em&gt;on the client, so that client can refresh the user interface and show the name of the newly entered user in the list of users of the chat room. Below is the relevant piece of code.&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:2389c65a-1bbb-4b08-ab09-c7210d0e443d&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
       public void Register(User userHandle)
        {
            try
            {
						//---irrelevant code removed ---------
                       foreach (KeyValuePair&amp;lt;string, IChatCallback&amp;gt; kvp in registeredUser)
                        {
                            IChatCallback callback = kvp.Value;
                            callback.RefreshUserList(onlineUsers);
                        }
                    }

                }
               // ---irrelevant code removed ---------

            }
            catch (UserHandleInUseException uEx)
            {
                log.Error(&amp;quot;User handle is alread in use. Error Detail: &amp;quot; + uEx.Message);
                throw;

            }

        }
[/sourcecode]

&lt;/div&gt;
&lt;h6 align=&quot;justify&quot;&gt;The Service Side Code&lt;/h6&gt;
&lt;p&gt;EAChatService.cs inherits from ServiceBase.cs. ServiceBase class has some common properties used why the EAChatService class. For instance, the ServiceBase class has a protected getter property  which returns the channel to the client instance which called the operation currently. Below is the code snippet.&lt;/p&gt;
&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:5c2a9717-b10b-4593-8ad3-7fcf6c9cc15e&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
      protected IChatCallback Callback
       {
           get
           {
               return OperationContext.Current.GetCallbackChannel&amp;lt;IChatCallback&amp;gt;();
           }
       }
[/sourcecode]

&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;ServiceBase class also has a protected dictionary for registeredUsers which stores the userID and the corresponding Callback as a keyvalue pair in the dictionary object. Since multiple users may call the &lt;em&gt;Register &lt;/em&gt;method at once, the critical section of adding users in the dictionary is synchronized using a lock. below is the complete code of register method.&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:a2ece10f-4f44-4329-81ca-decd9b13b982&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
       public void Register(User userHandle)
        {
            try
            {
                if (!registeredUser.ContainsKey(userHandle.UserId) &amp;amp;&amp;amp;
                    !registeredUser.ContainsValue(Callback))
                {
                    lock (syncObject)
                    {
                        registeredUser.Add(userHandle.UserId, Callback);
                        onlineUsers.Add(userHandle);

                        foreach (KeyValuePair&amp;lt;string, IChatCallback&amp;gt; kvp in registeredUser)
                        {
                            IChatCallback callback = kvp.Value;
                            callback.RefreshUserList(onlineUsers);
                        }
                    }

                }
                else
                {
                    throw new UserHandleInUseException(ServiceFaultCode.HANDLE_IN_USE, &amp;quot;User with this handle already exist. Please choose a different handle.&amp;quot;);
                }
            }
            catch (UserHandleInUseException uEx)
            {
                log.Error(&amp;quot;User handle is alread in use. Error Detail: &amp;quot; + uEx.Message);
                throw;

            }

        }
[/sourcecode]

&lt;/div&gt;
&lt;h6&gt;The Client Code&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;The client code is implemented in the &lt;em&gt;ChatWindow&lt;/em&gt; cliass. The &lt;em&gt;ChatWindow&lt;/em&gt;  class has a SynchronizationContext which is used to marshal messages from one thread to another thread. You must be wondering, why do we need to marshal messages from one thread to another. The reason is that the client UI runs on a separate thread and the duplex message from the WCF service is delivered to the client application via another thread. Now the message sent from WCF service as part of duplex call cannot be directly used by the client UI. To enable the message transmission between the UI thread and callback thread, we use the UI thread’s SynchronizationContext and call its &lt;em&gt;Post&lt;/em&gt; method to pass the message. I am using Unity container to hold and resolve instances of SynchronizationContext object. Below is the implementation of &lt;em&gt;RefreshUserList&lt;/em&gt; callback method which demonstrates the SynchronizationContext usage.&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:935a3bc5-6dc3-412f-984e-6869b3b190f6&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot; padlinenumbers=&quot;true&quot;]
       public void RefreshUserList(List&amp;lt;User&amp;gt; onlineUsers)
        {
            ClearOnlineUserList();

            foreach (User user in onlineUsers)
            {

                SendOrPostCallback callback =
                delegate(object state)
                {
                    this.OnlineUserListBox.Items.Add(user.UserId);
                };

                _uiSyncContext = (SynchronizationContext)container.Resolve(typeof(SynchronizationContext));
                _uiSyncContext.Post(callback, user.UserId);
            }
        }
[/sourcecode]

&lt;/div&gt;
&lt;h6&gt;The WCF endpoint &amp;amp; Hosting&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;The WCF endpoint is configured programmatically in the EA.Host.ServiceHostEngine project where we have the logic of hosting the WCF service as well.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;I have defined an Interface IHostScheme.cs which has the declaration of  &lt;em&gt;Host &lt;/em&gt;method and this interface is implemented by NetTcpHost.cs. Since one of the assumptions is that this chat application works in intranet, I choseto use NetTcp binding for the communication. In future if we decide to make to this chat application work in extranet then we can create another class implementing the IHostScheme interface with appropriate binding implementation.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Lets look at the NetTcpScheme.cs class.&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:a2203c92-2db1-433f-b25b-1f9d25cc64d8&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
    public class NetTcpHost : IHostScheme
    {
        public ServiceHost Host(string portNumber, bool enableMetaData)
        {
            Type contractType = typeof(IEAChatService);
            Type serviceType = typeof(EAChatService);

            Uri baseAddress = GetBaseAddress(portNumber);

            ServiceHost serviceHost = new ServiceHost(serviceType, baseAddress);
            serviceHost.AddServiceEndpoint(contractType, new NetTcpBinding(), baseAddress.AbsoluteUri);

            ServiceMetadataBehavior metaDataBehavior = new ServiceMetadataBehavior();
            metaDataBehavior.HttpGetEnabled = false;
            serviceHost.Description.Behaviors.Add(metaDataBehavior);

            if (enableMetaData)
            {
                serviceHost.AddServiceEndpoint(ServiceMetadataBehavior.MexContractName,
              MetadataExchangeBindings.CreateMexTcpBinding(), &amp;quot;mex&amp;quot;);
            }

            return serviceHost;
        }

        private Uri GetBaseAddress(string portNumber)
        {
            string prefix = ConfigurationManager.AppSettings[&amp;quot;nettcp_prefix&amp;quot;];
            string chatServicePath = ConfigurationManager.AppSettings[&amp;quot;EAChatServicePath&amp;quot;];

            return new Uri(prefix + portNumber + chatServicePath);

        }
    }
[/sourcecode]

&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;The code is pretty much self explanatory. This class is responsible for creating a ServiceHost and a ServiceEndpoint. To create a ServiceHost, we need the type of Service contract and to create a service endpoint which will be hosted by the ServiceHost, we need the contract’s type, address (along with the port) where we will host the service and binding is set to NetTcpBinding because that’s one of the requirement in the problem statement that communication has to take place over tcp port.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;I have made HttpGetEnabled property of ServiceMetadataBehavior to false, as I don’t se any benefit of exposing the wsdl over http for our application. However, MEX endpoint is made configurable, so that if in future we wish to create a new client and create a proxy using svcutil for communication, we could do so easily.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;That’s it! There are other utility projects and relatively less interesting code in the solution, so I will skip the remaining details.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Feel free to use the code and modify it according to your requirements. The code is available  in my &lt;a href=&quot;https://github.com/avegaraju/WCFChatApp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; account.&lt;/p&gt;
&lt;p&gt;If you have any queries, feel free to ask in the comments section.&lt;/p&gt;</content><author><name>avegaraju</name></author><category term="callback" /><category term="chat" /><category term="code challenge" /><category term="Coding Challenge &amp;amp; Competitions" /><category term="coding competition" /><category term="duplex" /><category term="interview question" /><category term="synchronizationcontext" /><category term="wcf" /><category term="WCF chat service" /><summary type="html">I attended a interview recently for which the pre-requisite was to develop a chat application using WCF as part of a code challenge. The requirement was quite simple, so instead of taking the usual route of creating a WCF service and adding its reference to a client application, I decided to hand code everything without any configuration or service references! Of course the  assumption here is that the service and client applications are owned by a single company/team so that the contracts can be shared between the service and client. The complete code is available in my Github account.</summary></entry><entry><title type="html">Mobile Push Notification Service - Design Approach (Part 1)</title><link href="/2015/12/08/mobile-push-notification-service-design-approach-part-1/" rel="alternate" type="text/html" title="Mobile Push Notification Service - Design Approach (Part 1)" /><published>2015-12-08T18:00:00+01:00</published><updated>2015-12-08T18:00:00+01:00</updated><id>/2015/12/08/mobile-push-notification-service-design-approach-part-1</id><content type="html" xml:base="/2015/12/08/mobile-push-notification-service-design-approach-part-1/">&lt;h6&gt;&lt;span style=&quot;font-weight:normal;&quot;&gt;Overview of Push Notifications&lt;/span&gt;&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;In this article, I am going to design the architecture for implementing push notifications for you mobile application. This part only has design and architecture information, code will be covered in Part 2.&lt;/p&gt;

&lt;blockquote&gt;If you are new to push notifications, please read &lt;a href=&quot;https://en.wikipedia.org/wiki/Notification_service&quot;&gt;wiki &lt;/a&gt;article about the technology and also about &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Cloud_Messaging&quot;&gt;GCM &lt;/a&gt;and &lt;a href=&quot;https://en.wikipedia.org/wiki/Apple_Push_Notification_Service&quot;&gt;APN &lt;/a&gt;services.&lt;/blockquote&gt;
&lt;!--more--&gt;

&lt;p&gt;Below diagram depicts a high level overview of device registration process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ashishvegaraju.files.wordpress.com/2015/11/devicereg.png?w=559&quot; alt=&quot;DeviceReg&quot; width=&quot;1312&quot; height=&quot;758&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Device sends sender ID, application ID to GCM server for registration.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Upon registration Cloud Service (GCM/APNs) sends a unique registration ID to the device.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;After receiving the registration ID from the cloud service the device will forward the registration ID to the Push Notification Web Service.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;The Push Notification web service will store the registration ID in a local database for later use.&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;justify&quot;&gt;a. Whenever Push Notification service needs to send the notification, it has to call GCM/APN service with registration ID of the device which is stored in the database.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;b. GCM/APN service will deliver the notification to respective mobile device based on the registration ID.&lt;/p&gt;

&lt;blockquote&gt;Push Notification service would require an outbound internet connection to send messages to cloud services. Make sure to open two outbound ports on your push notification server.&lt;/blockquote&gt;
&lt;h4&gt;&lt;strong&gt;Push Notification Components&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;You would need to implement two components:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
&lt;h5&gt;&lt;em&gt;&lt;strong&gt;Push Notification Web Service&lt;/strong&gt;&lt;/em&gt;&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;justify&quot;&gt;Push notification web service could be a rest service. Bare minimum the web service should have two functionalities. One, to register new device and Second, to unregister a device.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;
&lt;h5&gt;&lt;strong&gt;&lt;em&gt;Push Notification Windows Service.&lt;/em&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;justify&quot;&gt;You need to implement a windows service which could spawn multiple threads to listen to a messaging queue at a specified address. This service should be capable to pick up messages as and when it arrives to the messaging queue. The service will then query the local database and get a list of eligible devices which should receive the notification message and communicate with the cloud messaging services to get the notifications delivered.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p align=&quot;justify&quot;&gt;Push Notification Windows service is a Microsoft Windows&lt;sup&gt;® &lt;/sup&gt;terminology. On non-windows platform this windows service will be a process which will be initiated with a start-up batch file which could be hooked up with tomcat initialization process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;strong&gt;Push Notification Architecture&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Diagram below depicts the push notification architecture at high level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ashishvegaraju.files.wordpress.com/2015/11/hld.png?w=559&quot; alt=&quot;HLD&quot; width=&quot;1313&quot; height=&quot;924&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;As depicted in the diagram above, the first step is get the unique device ID from the cloud messaging service. The mobile application should make a call to the cloud messaging service every time it is launched. It is important to make this call every time as it may so happen that the unique device ID assigned earlier has now expired.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;

Second step is to call the Push Notification web service from the mobile application and include the unique device ID (received from cloud messaging service) in the payload. You may want to pass some additional information like the device type, device operating system etc in the payload. A sample payload JSON is shown below:
&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:8deaa2ad-61ae-43d6-8179-78575cbdfd0d&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;javascript&quot;]
DevicePayload:{

deviceId:'APA9sdsdA',

deviceType:'mobile/tablet',

deviceOS:'android/apple',

userID:'xyz@gmail.com',

}

[/sourcecode]

&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Push notification web service will persist the payload in a local database.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Core product which is responsible for generating events per user will create notification messages and publish it to the Messaging Queue.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;Push notification windows service’s functionality is to constantly poll the Messaging Queue and pull any new message that arrives to the queue. The service should then query the local database to get the device id associated with the user id for which the notification was generated.&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;
&lt;div align=&quot;justify&quot;&gt;With the fetched device id, the windows service will then communicate with cloud messaging services (GCM/APN).&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;justify&quot;&gt;This is the architecture at high level to design push notification service for your mobile application. In the next article (Part-2), I will cover the code required to communicate with the cloud messaging services.&lt;/p&gt;</content><author><name>avegaraju</name></author><category term="APN" /><category term="apple push notification service" /><category term="architecure" /><category term="cloud messaging services" /><category term="design" /><category term="Design &amp;amp; Architecture" /><category term="GCM" /><category term="google cloud messaging service" /><category term="mobile" /><category term="push notification" /><summary type="html">Overview of Push Notifications In this article, I am going to design the architecture for implementing push notifications for you mobile application. This part only has design and architecture information, code will be covered in Part 2.</summary></entry><entry><title type="html">A Thread Safe Singleton Class in .NET</title><link href="/2015/12/08/a-thread-safe-singleton-class-in-net/" rel="alternate" type="text/html" title="A Thread Safe Singleton Class in .NET" /><published>2015-12-08T17:32:00+01:00</published><updated>2015-12-08T17:32:00+01:00</updated><id>/2015/12/08/a-thread-safe-singleton-class-in-net</id><content type="html" xml:base="/2015/12/08/a-thread-safe-singleton-class-in-net/">&lt;p align=&quot;justify&quot;&gt;In this post I will demonstrate creating a singleton class in .Net that is thread safe. As usual the singleton class should have a private constructor as shown below so that any other class cannot “directly” create an instance of our singleton class.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Apart from that, I have created two global variables, one to hold the instance of the Singleton class and another one of type object which will be used later for synchronization between threads (more on that later).&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:fa80e900-39bf-485c-b945-fc9e5bb5939c&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot; padlinenumbers=&quot;true&quot; light=&quot;true&quot; wraplines=&quot;true&quot;]
    static SingletonSample _instance;
    static readonly object _synchronizer = new object();
    /// &amp;amp;amp;lt;summary&amp;amp;amp;gt;
    /// Private C'tor, so that this class cannot be instantited by other classes directly
    /// &amp;amp;amp;lt;/summary&amp;amp;amp;gt;
    private SingletonSample()
    {

    }

[/sourcecode]

&lt;/div&gt;
&lt;h6&gt;Method 1 – Using synchronization lock&lt;/h6&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;GetInstance is a public static method, this method is the only way by which any other class can get instance of the singleton class.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Below code snippet uses double check pattern before creating the instance of the singleton class. The first If statement, if true, will give the instance of Singleton class instantly. However, if _instance variable is null then program will enter a critical section (the lock statement) synchronized using a global object (_synchronizer). Inside the critical section, I am checking the _instance  variable again if it is null (double check), if it is, then we finally create the instance of the class.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;One interesting point to note here is, I am not creating the instance directly and returning it back. I am first assigning the class reference into a temporary object of type SingletonClass (tempInstance) and then doing a  &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.volatile(v=vs.110).aspx&quot;&gt;Volatile&lt;/a&gt; write on the actual instance variable (_instance).&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:2559210c-f730-46f3-821d-6bb73ce1632b&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
        /// &amp;amp;amp;lt;summary&amp;amp;amp;gt;
        /// Method is responsible for providing instance of this class.
        /// &amp;amp;amp;lt;/summary&amp;amp;amp;gt;
        /// &amp;amp;amp;lt;returns&amp;amp;amp;gt;Instance of SingleTonSample class&amp;amp;amp;lt;/returns&amp;amp;amp;gt;
        public static SingletonSample GetInstance()
        {
            //If instance is available return that.
            if (_instance != null)
                return _instance;

            //Critical section. Ony one thread can enter at a time.
            lock(_synchronizer)
            {
                //Check again if the instance in null
                if(_instance == null)
                {
                    SingletonSample tempInstance = new SingletonSample();
                    //Volatile write to make sure that _instance is 
                    //populated with tempInstance reference without any compiler optimization.
                    Volatile.Write(ref _instance, tempInstance);
                }
            }

            return _instance;
        }
[/sourcecode]

&lt;/div&gt;
&lt;p align=&quot;justify&quot;&gt;The problem with this approach is that if this method is used in a highly parallel system, the critical section will cause all threads to do nothing but wait for an instance of Singleton class to be created. However, this will happen only once when the first instance is getting created, but still, this is wasteful of the resources.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Below is another, more efficient way of creating a singleton which neither uses double check pattern nor it has a critical section for thread synchronization.&lt;/p&gt;

&lt;h6&gt;Method 2 – Without Critical Section or Double Check&lt;/h6&gt;
&lt;p align=&quot;justify&quot;&gt;Below method will allow multiple threads to create instance of Singleton class, but &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.interlocked(v=vs.110).aspx&quot;&gt;Interlocked&lt;/a&gt; class’s CompareExchange will make sure that only one instance is assigned to _instance variable. Objects created by other  threads and not assigned to _instance variable will soon become Orphan and  will be garbage collected at a later point of time by the CLR.&lt;/p&gt;

&lt;div id=&quot;scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:3c6dd858-1ab2-41bc-9bfa-fc04938077a4&quot; class=&quot;wlWriterEditableSmartContent&quot; style=&quot;float:none;margin:0;display:inline;padding:0;&quot;&gt;

[sourcecode language=&quot;csharp&quot;]
        /// &amp;amp;amp;lt;summary&amp;amp;amp;gt;
        /// Method is responsible for providing instance of this class without critical section
        /// or double check pattern.
        /// &amp;amp;amp;lt;/summary&amp;amp;amp;gt;
        /// &amp;amp;amp;lt;returns&amp;amp;amp;gt;Instance of SingletonSample class&amp;amp;amp;lt;/returns&amp;amp;amp;gt;
        public static SingletonSample GetInstance()
        {
            //If instance is available return that.
            if (_instance != null)
                return _instance;

            SingletonSample tempInstance = new SingletonSample();
            /*Multiple threads will create singleton object, but only 
            *one will be asssgined to _instance variable. Rest others will be 
            *GC'd (Garbage Collected) later at some point of time. 
            */
            Interlocked.CompareExchange(ref _instance, tempInstance,null);

            return _instance;
        }
[/sourcecode]

&lt;/div&gt;
&lt;p&gt;Both methods are thread safe. However, method 2 is marginally more efficient and lean as compared to the first one.&lt;/p&gt;</content><author><name>avegaraju</name></author><category term=".net" /><category term="c#" /><category term="csharp" /><category term="Design &amp;amp; Architecture" /><category term="double check pattern" /><category term="Singleton" /><category term="thread safe" /><summary type="html">In this post I will demonstrate creating a singleton class in .Net that is thread safe. As usual the singleton class should have a private constructor as shown below so that any other class cannot “directly” create an instance of our singleton class. Apart from that, I have created two global variables, one to hold the instance of the Singleton class and another one of type object which will be used later for synchronization between threads (more on that later).</summary></entry></feed>